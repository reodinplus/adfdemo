{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-sw-cd"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"LS_ADB_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LS_ADB'"
		},
		"LS_ADB_Job_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LS_ADB_Job'"
		},
		"LS_ASQL_Demo_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_ASQL_Demo'"
		},
		"LS_Blob_File_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Blob_File'"
		},
		"LS_Deltalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Deltalake'"
		},
		"LS_REST_QYWeChat_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_REST_QYWeChat'"
		},
		"adfdemo_a_sql_src_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_a_sql_src'"
		},
		"adfdemo_asql_src_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_asql_src'"
		},
		"adfdemo_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_storage'"
		},
		"http_onedriver_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'http_onedriver'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().keyVaultAccountURL}"
		},
		"LS_ADB_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0723-022831-hgfjeows"
		},
		"LS_ASQL_Demo_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverdevswcd.database.windows.net"
		},
		"LS_ASQL_Demo_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldevswcd"
		},
		"LS_ASQL_Demo_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladminuser01"
		},
		"LS_Deltalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://databricksucextadls2.dfs.core.windows.net/"
		},
		"LS_HTTP_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/"
		},
		"LS_REST_QYWX_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin"
		},
		"LS_REST_QYWeChat_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin"
		},
		"LS_REST_QYWeChat_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rest"
		},
		"LS_REST_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@linkedService().corpid&corpsecret=@linkedService().corpsecret"
		},
		"LS_WEB_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{linkedService().corpid}&corpsecret=@{linkedService().corpsecret}"
		},
		"adfdemo_rest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.xygeng.cn/one"
		},
		"http_onedriver_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sharewinfobi-my.sharepoint.com/"
		},
		"http_onedriver_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "zhyding@sharewinfobi.onmicrosoft.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/blob_to_stg_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"enableStaging": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "sales"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/depency demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "123",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1_copy1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If Condition1_copy1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "'ad'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1_copy1_copy1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "@int('123')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition3",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1, 1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varVal1",
										"value": {
											"value": "@int('2345')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parVal1": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"varVal1": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-11T06:25:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"keyVaultAccountURL": {
						"type": "string",
						"defaultValue": "https://asql-kva-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1415684505735454.14.azuredatabricks.net/",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LS_ADB_accessToken')]"
					},
					"existingClusterId": "[parameters('LS_ADB_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADB_Job')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1415684505735454.14.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LS_ADB_Job_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1:4",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "17.0.x-photon-scala2.13",
					"clusterOption": "Autoscaling",
					"newClusterInitScripts": [],
					"dataSecurityMode": "USER_ISOLATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_Demo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_ASQL_Demo_properties_typeProperties_server')]",
					"database": "[parameters('LS_ASQL_Demo_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_ASQL_Demo_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_ASQL_Demo_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Blob_File')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Blob_File_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Deltalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Deltalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Deltalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTP_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWX')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "企业微信的 REST 类型的链接服务",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWX_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWeChat')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWeChat_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('LS_REST_QYWeChat_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_REST_QYWeChat_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"corpid": {
						"type": "string"
					},
					"corpsecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_WEB_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WebConnection",
				"parameters": {
					"corpid": {
						"type": "string"
					},
					"corpsecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"typeProperties": {
					"url": "[parameters('LS_WEB_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_a_sql_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_a_sql_src_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_asql_src_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_rest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('adfdemo_rest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/http_onedriver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('http_onedriver_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('http_onedriver_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('http_onedriver_password')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}