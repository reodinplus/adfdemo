{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-sw-cd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     srcTableNameWithSchema as string ('dbo.src_object'),",
						"     dstTableNameWithSchema as string ('dbo.stg_object')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($srcTableNameWithSchema, '.')[1]),",
						"     tableName: (split($srcTableNameWithSchema, '.')[2]),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 derive(flle_name = 123) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($dstTableNameWithSchema, '.')[1]),",
						"     tableName: (split($dstTableNameWithSchema, '.')[2]),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     srcTableSQL as string ('select name, object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published from dbo.src_object where modify_date>\\'1900-01-01\\''),",
						"     dstTableNameWithSchema as string ('dbo.stg_object')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: ($srcTableSQL),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 derive(file_name = 123) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($dstTableNameWithSchema, '.')[1]),",
						"     tableName: (split($dstTableNameWithSchema, '.')[2]),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 aggregate(cnt = count(object_id),",
						"          each(patternMatch(`(name)` , type=='string'), $$ = count(object_id)),",
						"          each(match(in(['type','type_desc'],name)), $$ = first($$))) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "splitByTypeDesc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 split(type_desc == 'USER_TABLE' || type_desc == 'VIEW',",
						"     type_desc == 'SQL_STORED_PROCEDURE' ||  type_desc == 'SQL_SCALAR_FUNCTION' || type_desc == 'SQL_TABLE_VALUED_FUNCTION' || type == 'SQL_INLINE_TABLE_VALUED_FUNCTION',",
						"     disjoint: false) ~> splitByTypeDesc@(typeIsTableView, typeIsProgramingObject, typeOther)",
						"splitByTypeDesc@typeIsTableView sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_derivedcolumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"derivedColumn1 filter(type =='P') ~> filter1",
						"source1 derive(column1 = 'a column value',",
						"          each(match(type=='integer'), $$ = $$ + 2),",
						"          each(match(type=='string'), $$ = $$ + 'kk'),",
						"          column2 = 'ldsfds',",
						"          each(match(type=='string'), $$+'short' = $$+'123')) ~> derivedColumn1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source1, source2 exists(source1@name == source2@name,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 filter(type_desc == 'SQL_STORED_PROCEDURE' || type_desc == 'USER_TABLE') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source1, source2 join(fuzzyCompare(source1@name, source2@name, 80.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: true,",
						"     scoreColumn:'60',",
						"     broadcast: 'off')~> join1",
						"join1 select(mapColumn(",
						"          each(match(instr(name,'source1@')==0))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          object_id,",
						"          principal_id,",
						"          schema_id,",
						"          parent_object_id,",
						"          type,",
						"          type_desc,",
						"          create_date,",
						"          modify_date,",
						"          is_ms_shipped,",
						"          is_published,",
						"          is_schema_published",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_key as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select name, object_id object_key from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"lookup1 select(mapColumn(",
						"          each(match(instr(name,'source1@')==0))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, source2 lookup(source1@name == source2@name,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          object_id,",
						"          principal_id,",
						"          schema_id,",
						"          parent_object_id,",
						"          type,",
						"          type_desc,",
						"          create_date,",
						"          modify_date,",
						"          is_ms_shipped,",
						"          is_published,",
						"          is_schema_published",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          class as string,",
						"          score as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select *\\nfrom (values\\n     (N\\'张三\\', N\\'语文\\', 80),\\n     (N\\'张三\\', N\\'数学\\', 89),\\n     (N\\'张三\\', N\\'英语\\', 88),\\n     (N\\'李四\\', N\\'语文\\', 89),\\n     (N\\'李四\\', N\\'数学\\', 90),\\n     (N\\'李四\\', N\\'英语\\', 91)\\n) t1 ([name], class, score)',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(groupBy(name),",
						"     pivotBy(class, ['语文', '数学', '英语', null]),",
						"     sum = sum(score),",
						"     columnNaming: 'a$Nb$Vc',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from (values(N\\'type1\\', 2), (N\\'type2\\', 3)) as t1([type], cnt)',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['type1', 'type2', 'D', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select type, count(1) as cnt from dbo.src_object group by type',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['D', 'FN', 'P', 'U', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_src",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          body as (response_code as boolean, results as (category as string, correct_answer as string, difficulty as string, incorrect_answers as string[], question as string, type as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source2",
						"source1 select(mapColumn(",
						"          each(match(type=='string'&&length(name)<12)),",
						"          each(match(locate('id',name)>0)),",
						"          each(patternMatch(`(r)`))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          each(body.results,match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'adfdemo_rest_two',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          category,",
						"          correct_answer,",
						"          difficulty,",
						"          incorrect_answers,",
						"          question,",
						"          type",
						"     )) ~> sink2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 sort(asc(name, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.system_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'sys',",
						"     tableName: 'all_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source3",
						"source1, source2, source3 union(byName: false)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     stgTableNameWithSchem as string ('dbo.adfdemo')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'objects',",
						"     isolationLevel: 'READ_COMMITTED') ~> source1",
						"source1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          insert_dt as string,",
						"          file_name as string,",
						"          file_last_modifty_time as timestamp,",
						"          product_id as integer,",
						"          qty as integer,",
						"          unit_price as decimal(19,4),",
						"          subtotal as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select convert(nvarchar(23), insert_dt, 121) insert_dt, file_name, file_last_modifty_time, product_id, qty, unit_price, subtotal from dbo.stg_sales',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 filter(qty <= 10) ~> filter1",
						"filter1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_template_src_ods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varTruncateProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Get Prev Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetPrevLoadPointProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varPrevLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varPrevLoadPoint",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.PrevLoadPoint",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varConfigurationId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varConfigurationId",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.ConfigurationId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move src to stg",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set varPrevLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varConfigurationId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    variables('varLoadSQL'),\n    ' where modify_date > ''', \n    variables('varPrevLoadPoint'), \n    ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Current Load Point SQL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "move src to stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetCurrentLoadPointSQLProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrentLoadPointSQL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Current Load Point SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrentLoadPointSQL",
							"value": {
								"value": "@activity('Get Current Load Point SQL').output.firstRow.CurrLoadPointTSQL",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Curr Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set varCurrentLoadPointSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('varCurrentLoadPointSQL')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrLoadPoint",
							"value": {
								"value": "@string(activity('Get Curr Load Point').output.firstRow.CurrLoadPoint)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varCurrRowCnt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrRowCnt",
							"value": {
								"value": "@activity('Get Curr Load Point').output.firstRow.RowCnt",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move stg to ods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set varCurrLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varCurrRowCnt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varOdsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Save Curr Point Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "move stg to ods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varETLWorkSaveCurrLoadPointProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"CurrLoadPoint": {
									"value": {
										"value": "@variables('varCurrLoadPoint')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataLoadTag": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								},
								"SSISProject": {
									"value": {
										"value": "@variables('varSSISProject')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"varStgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"varOdsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					},
					"varLoadSQL": {
						"type": "String",
						"defaultValue": "select name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published from dbo.src_object"
					},
					"varTruncateProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"varETLWorkGetPrevLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Get"
					},
					"varSSISProject": {
						"type": "String",
						"defaultValue": "Common_ADF"
					},
					"varPrevLoadPoint": {
						"type": "String"
					},
					"varConfigurationId": {
						"type": "Integer"
					},
					"varETLWorkGetCurrentLoadPointSQLProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_CurrLoadPointTSQL_Get"
					},
					"varCurrentLoadPointSQL": {
						"type": "String"
					},
					"varCurrLoadPoint": {
						"type": "String"
					},
					"varCurrRowCnt": {
						"type": "Integer"
					},
					"varETLWorkSaveCurrLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Update"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-12T07:27:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadate_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of file",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_stroage_dataset_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure",
								"columnCount",
								"contentMD5",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "adfdemo",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_asql_dataset_city",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T08:26:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_excel_to_asql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "file-data/adfdemo/Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirsrtName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "storge_excel_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_employeedemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-14T08:45:56Z"
			},
			"dependsOn": []
		}
	]
}