{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-sw-cd"
		},
		"Trigger_ukk_properties_CopyPipeline_ukk_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().scheduledTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/object')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "get last modify date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modify_date = isnull(max(modify_date), '1900-01-01') from dbo.ods_object",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('odsTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "src to stg",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get last modify date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    variables('srcTableSQL'), \n\t' where modify_date > ''', activity('get last modify date').output.firstRow.last_modify_date, ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('srcTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "stg to ods",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "src to stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"odsTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.ods_object"
					},
					"srcTableSQL": {
						"type": "String",
						"defaultValue": "select name, object_id, principal_id, schema_id, parent_object_id,\ttype, type_desc, create_date, modify_date, is_ms_shipped, is_published,\tis_schema_published from dbo.src_object"
					},
					"srcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					},
					"odsProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-11T06:43:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/object_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "get last modify date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modify_date = isnull(max(modify_date), '1900-01-01') from dbo.ods_object",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('odsTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "stg to ods",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "get last modify date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"srcTableSQL": {
										"value": "'@{concat(variables('srcTableSQL'),  ' where modify_date>\\''', activity('get last modify date').output.firstRow.last_modify_date,  '\\''')}'",
										"type": "Expression"
									},
									"dstTableNameWithSchema": {
										"value": "'@{variables('stgTableNameWithSchema')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"odsTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.ods_object"
					},
					"srcTableSQL": {
						"type": "String",
						"defaultValue": "select name, object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published from dbo.src_object"
					},
					"srcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					},
					"odsProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T02:32:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web_Get AcceccTokenObj",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SVar_Set Var accecc_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web_Get AcceccTokenObj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AcceccTokenObj').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web_Set Department List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/department/list?access_token=@{variables('access_token')}&id",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web_Get User List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_qiweb_uselist",
								"type": "DatasetReference",
								"parameters": {
									"access_token": {
										"value": "@variables('access_token')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"corpid": {
						"type": "String",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "String",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"access_token": {
						"type": "String"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_to_asql_adfdemo_rest_one')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_one'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "false"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['data']['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['data']['tag']"
										},
										"sink": {
											"name": "tag",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['name']"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['origin']"
										},
										"sink": {
											"name": "origin",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['content']"
										},
										"sink": {
											"name": "content",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['created_at']"
										},
										"sink": {
											"name": "created_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['updated_at']"
										},
										"sink": {
											"name": "updated_at",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_rest_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_rest_one"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_to_asql_adfdemo_rest_two')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_two'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['difficulty']"
										},
										"sink": {
											"name": "difficulty",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['question']"
										},
										"sink": {
											"name": "question",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['correct_answer']"
										},
										"sink": {
											"name": "correct_answer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['incorrect_answers']"
										},
										"sink": {
											"name": "incorrect_answers",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['results']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_rest_two"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addSeconds(addHours(activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time, -8), 1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "COPY_Extract Data From File And Load Into STG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "FileLastModifyDate",
													"value": {
														"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "FileName"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "FileLastModifyDate"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": {
													"value": "@variables('srcSheetName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@variables('stgTableNameWithSchema')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = ISNULL(MAX(file_last_modifty_time), '1900-01-01') from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T05:38:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src2",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addSeconds(addHours(activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time, -8), 1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "COPY_Extract Data From File And Load Into STG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "FileLastModifyDate",
													"value": {
														"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "FileName"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "FileLastModifyDate"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "storage_excel_src2",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": {
													"value": "@variables('srcSheetName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst1",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@variables('stgTableNameWithSchema')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src2",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = ISNULL(MAX(file_last_modifty_time), '1900-01-01') from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst1",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T08:45:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified过滤实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(addHours(activity('Get File Metadata').output.lastModified, 8), activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "COPY_Extract Data From File And Load Into STG",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"additionalColumns": [
															{
																"name": "FileName",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															{
																"name": "FileLastModifyDate",
																"value": {
																	"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "file_name",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "FileLastModifyDate",
																	"type": "String"
																},
																"sink": {
																	"name": "file_last_modifty_time",
																	"type": "DateTime",
																	"physicalType": "datetime"
																}
															},
															{
																"source": {
																	"name": "ProdunctId",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "product_id",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "Qty",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "qty",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "UnitPrice",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "unit_price",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															},
															{
																"source": {
																	"name": "SubTotal",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "subtotal",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "storage_excel_src",
														"type": "DatasetReference",
														"parameters": {
															"containerName": {
																"value": "@variables('srcContainerName')",
																"type": "Expression"
															},
															"directoryName": {
																"value": "@variables('srcDirecotryName')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"sheetName": {
																"value": "@variables('srcSheetName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "azuresql_dst",
														"type": "DatasetReference",
														"parameters": {
															"tableNameWithSchema": {
																"value": "@variables('stgTableNameWithSchema')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = MAX(file_last_modifty_time) from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T02:38:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "包含完整的文件备份，不增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Backup file by copy file",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Extract Source Data To STG",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@concat(\n    variables('srcDirecotryName'),\n    if(equals(variables('isSuccess'), 1), '/success', '/failed')\n)",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat(\n    substring(item().name, 0, indexOf(item().name, variables('srcFileExtendName'))), \n    '_',\n    formatDateTime(addHours(utcNow(), 8), 'yyyyMMddHHmmss'),variables('srcFileExtendName')\n)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file by copy file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Extract Source Data To STG",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(1,1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "COPY_Extract Data From File And Load Into STG",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Init isSuccess Success",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"additionalColumns": [
															{
																"name": "FileName",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															{
																"name": "FileLastModifyDate",
																"value": {
																	"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "file_name",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "FileLastModifyDate",
																	"type": "String"
																},
																"sink": {
																	"name": "file_last_modifty_time",
																	"type": "DateTime",
																	"physicalType": "datetime"
																}
															},
															{
																"source": {
																	"name": "ProdunctId",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "product_id",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "Qty",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "qty",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "UnitPrice",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "unit_price",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															},
															{
																"source": {
																	"name": "SubTotal",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "subtotal",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "storage_excel_src",
														"type": "DatasetReference",
														"parameters": {
															"containerName": {
																"value": "@variables('srcContainerName')",
																"type": "Expression"
															},
															"directoryName": {
																"value": "@variables('srcDirecotryName')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"sheetName": {
																"value": "@variables('srcSheetName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "azuresql_dst",
														"type": "DatasetReference",
														"parameters": {
															"tableNameWithSchema": {
																"value": "@variables('stgTableNameWithSchema')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set isSuccess Failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "COPY_Extract Data From File And Load Into STG",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isSuccess",
													"value": 0
												}
											},
											{
												"name": "Init isSuccess Success",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isSuccess",
													"value": 1
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"isSuccess": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T02:37:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "storage_account",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "compose1",
							"flowlet": {
								"referenceName": "flowlet2",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true,",
						"     format: 'excel',",
						"     container: 'file-data',",
						"     folderPath: 'demo/ssiswork/地点数据',",
						"     sheetName: 'Sheet1',",
						"     firstRowAsHeader: true) ~> source1",
						"compose(composition: 'flowlet2') ~> compose1@(output1)",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'city',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq_employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"folder": {
					"name": "demo"
				},
				"typeProperties": {
					"sources": [
						{
							"name": "adfdemo_asql_dataset_employee",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_dataset_employee",
							"dataset": {
								"referenceName": "adfdemo_asql_dataset_employee",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared adfdemo_asql_dataset_employee = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"employee\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"adfdemo_asql_dataset_employee\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/qp_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"folder": {
					"name": "demo"
				},
				"typeProperties": {
					"sources": [
						{
							"name": "adfdemo_asql_dataset",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_dataset",
							"dataset": {
								"referenceName": "adfdemo_asql_dataset",
								"type": "DatasetReference"
							}
						},
						{
							"name": "adfdemo_asql_ds",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_ds",
							"dataset": {
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared adfdemo_asql_dataset = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"EmployeeDemo\"]}[Data] in InputTable;\r\nshared adfdemo_asql_ds = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"stg_sales\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"adfdemo_asql_dataset\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_m06_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_m06_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_activity_other')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "control_activity_common",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://www.baidu.com",
							"connectVia": {
								"referenceName": "TutorialIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "",
							"errorCode": ""
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.baidu.com",
							"method": "POST",
							"headers": {},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": false
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": " ",
									"tableName": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "msql_demo_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "b",
									"dbName": "TestDataSource"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-23T04:49:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo_mater')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_sales_pip",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batch_id": 1
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {
									"srcTableNameWithSchema": {
										"value": "'@{variables('dtSrcTableNameWithSchema')}'",
										"type": "Expression"
									},
									"dstTableNameWithSchema": {
										"value": "'@{variables('dfDstTableNameWithSchema')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "powerquery1",
						"type": "ExecuteWranglingDataflow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryasqldataset",
											"dataset": {
												"referenceName": "asql_dataset",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tinsert_dt as timestamp,\n\t\tupdate_dt as timestamp,\n\t\tfile_name as string,\n\t\tfile_last_modifty_time as timestamp,\n\t\tproduct_id as integer,\n\t\tqty as integer,\n\t\tunit_price as decimal(19,4),\n\t\tsubtotal as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UserQueryasqldataset"
										}
									]
								}
							]
						}
					},
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"storageAccountName": "storageswcd"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "5bfaa0a5-c173-40b9-a4bd-87736bdefe7a"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"dfDstTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"dtSrcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sales')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_src_stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *\nfrom (values\n\t(N'file-data', N'demo/ssiswork/地点数据', N'Sheet1', N'dbo.City'),\n\t(N'file-data', N'demo/ssiswork/产品数据', N'Sheet1', N'dbo.Product'),\n\t(N'file-data', N'demo/ssiswork/客户数据', N'Sheet1', N'dbo.Customer'),\n\t(N'file-data', N'demo/ssiswork/订单数据', N'Sheet1', N'dbo.[Order]')\n) t1(container_name,direcotry_name,sheet_name, stg);",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "file_excel_data_load",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"containerName": {
												"value": "@item().container_name",
												"type": "Expression"
											},
											"directoryName": {
												"value": "@item().direcotry_name",
												"type": "Expression"
											},
											"sheetName": {
												"value": "@item().sheet_name",
												"type": "Expression"
											},
											"stgTableNameWithSchema": {
												"value": "@item().stg",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:05:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_src_stg_from_filesystem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\nselect *\nfrom (values\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/地点数据', N'Sheet1', N'dbo.City'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/产品数据', N'Sheet1', N'dbo.Product'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/客户数据', N'Sheet1', N'dbo.Customer'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/订单数据', N'Sheet1', N'dbo.[Order]')\n) t1(container_name,direcotry_name,sheet_name, stg);",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "file_excel_data_load_from_filesystem",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"directoryName": {
												"value": "@item().direcotry_name",
												"type": "Expression"
											},
											"sheetName": {
												"value": "@item().sheet_name",
												"type": "Expression"
											},
											"stgTableNameWithSchema": {
												"value": "@item().stg",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:05:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select name from sys.objects"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {}
					},
					{
						"name": "Jar1",
						"type": "DatabricksSparkJar",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"parameters": []
						}
					},
					{
						"name": "Python1",
						"type": "DatabricksSparkPython",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"parameters": []
						}
					},
					{
						"name": "Custom1",
						"type": "Custom",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"headers": {}
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"timeout": "00:10:00"
						}
					},
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pq_employee",
								"type": "DataFlowReference",
								"datasetParameters": {
									"adfdemo_asql_dataset_employee": {},
									"UserQueryadfdemoasqldatasetemployee": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryadfdemoasqldatasetemployee",
											"dataset": {
												"referenceName": "adfdemo_asql_dataset_employee",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName,\n\t\tLastName\n\t)) ~> UserQueryadfdemoasqldatasetemployee"
										}
									]
								}
							]
						}
					},
					{
						"name": "Power Query2",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "qp_sales",
								"type": "DataFlowReference",
								"datasetParameters": {
									"adfdemo_asql_dataset": {},
									"adfdemo_asql_ds": {
										"schema": "dbo",
										"table": "stg_sales"
									},
									"UserQueryadfdemoasqlds": {
										"schema": "dbo",
										"table": "ods_sales"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryadfdemoasqlds",
											"dataset": {
												"referenceName": "adfdemo_asql_ds",
												"type": "DatasetReference",
												"parameters": {
													"schema": "dbo",
													"table": "ods_sales"
												}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tinsert_dt as timestamp,\n\t\tupdate_dt as timestamp,\n\t\tfile_name as string,\n\t\tfile_last_modifty_time as timestamp,\n\t\tproduct_id as integer,\n\t\tqty as integer,\n\t\tunit_price as decimal(19,4),\n\t\tsubtotal as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UserQueryadfdemoasqlds"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T05:55:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pq_employee')]",
				"[concat(variables('factoryId'), '/dataflows/qp_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retail_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_bronze_blob_master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"dstContainer": {
									"value": "@pipeline().parameters.dstContainer",
									"type": "Expression"
								},
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"dt": {
									"value": "@pipeline().parameters.dt",
									"type": "Expression"
								},
								"daysOffset": {
									"value": "@pipeline().parameters.daysOffset",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_silver_blob_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_bronze_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "silver_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_dim_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_silver_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_dim_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"date_start": {
									"value": "@pipeline().parameters.date_start",
									"type": "Expression"
								},
								"date_end": {
									"value": "@pipeline().parameters.date_end",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_fact_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_retail_dim_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_fact_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "job_retail_etl_job",
						"type": "DatabricksJob",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"jobId": "574857699270895",
							"jobParameters": {
								"catalog_name": "project_catalog",
								"dt": "2025-01-01",
								"date_start": "2020-01-01",
								"date_end": "2024-12-31"
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"dstContainer": {
						"type": "string",
						"defaultValue": "demo"
					},
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-01-02"
					},
					"daysOffset": {
						"type": "int",
						"defaultValue": -1000
					},
					"date_start": {
						"type": "string",
						"defaultValue": "2020-01-01"
					},
					"date_end": {
						"type": "string",
						"defaultValue": "2024-01-01"
					}
				},
				"folder": {
					"name": "retail/gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_ukk')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_ukk",
							"type": "PipelineReference"
						},
						"parameters": {
							"windowStart": {
								"type": "Expression",
								"value": "[parameters('Trigger_ukk_properties_CopyPipeline_ukk_parameters_windowStart')]"
							}
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2025-07-28T07:33:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		}
	]
}