{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-sw-cd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from (values(N\\'type1\\', 2), (N\\'type2\\', 3)) as t1([type], cnt)',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['type1', 'type2', 'D', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select type, count(1) as cnt from dbo.src_object group by type',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['D', 'FN', 'P', 'U', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_src",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          body as (response_code as boolean, results as (category as string, correct_answer as string, difficulty as string, incorrect_answers as string[], question as string, type as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source2",
						"source1 select(mapColumn(",
						"          each(match(type=='string'&&length(name)<12)),",
						"          each(match(locate('id',name)>0)),",
						"          each(patternMatch(`(r)`))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          each(body.results,match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'adfdemo_rest_two',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          category,",
						"          correct_answer,",
						"          difficulty,",
						"          incorrect_answers,",
						"          question,",
						"          type",
						"     )) ~> sink2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_src",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          body as (response_code as boolean, results as (category as string, correct_answer as string, difficulty as string, incorrect_answers as string[], question as string, type as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source2",
						"source1 select(mapColumn(",
						"          each(match(type=='string'&&length(name)<12)),",
						"          each(match(locate('id',name)>0)),",
						"          each(patternMatch(`(r)`))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          each(body.results,match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'adfdemo_rest_two',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          category,",
						"          correct_answer,",
						"          difficulty,",
						"          incorrect_answers,",
						"          question,",
						"          type",
						"     )) ~> sink2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 sort(asc(name, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.system_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'sys',",
						"     tableName: 'all_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source3",
						"source1, source2, source3 union(byName: false)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     stgTableNameWithSchem as string ('dbo.adfdemo')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'objects',",
						"     isolationLevel: 'READ_COMMITTED') ~> source1",
						"source1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          insert_dt as string,",
						"          file_name as string,",
						"          file_last_modifty_time as timestamp,",
						"          product_id as integer,",
						"          qty as integer,",
						"          unit_price as decimal(19,4),",
						"          subtotal as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select convert(nvarchar(23), insert_dt, 121) insert_dt, file_name, file_last_modifty_time, product_id, qty, unit_price, subtotal from dbo.stg_sales',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 filter(qty <= 10) ~> filter1",
						"filter1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_template_src_ods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varTruncateProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Get Prev Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetPrevLoadPointProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varPrevLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varPrevLoadPoint",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.PrevLoadPoint",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varConfigurationId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varConfigurationId",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.ConfigurationId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move src to stg",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set varPrevLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varConfigurationId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    variables('varLoadSQL'),\n    ' where modify_date > ''', \n    variables('varPrevLoadPoint'), \n    ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Current Load Point SQL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "move src to stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetCurrentLoadPointSQLProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrentLoadPointSQL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Current Load Point SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrentLoadPointSQL",
							"value": {
								"value": "@activity('Get Current Load Point SQL').output.firstRow.CurrLoadPointTSQL",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Curr Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set varCurrentLoadPointSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('varCurrentLoadPointSQL')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrLoadPoint",
							"value": {
								"value": "@string(activity('Get Curr Load Point').output.firstRow.CurrLoadPoint)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varCurrRowCnt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrRowCnt",
							"value": {
								"value": "@activity('Get Curr Load Point').output.firstRow.RowCnt",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move stg to ods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set varCurrLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varCurrRowCnt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varOdsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Save Curr Point Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "move stg to ods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varETLWorkSaveCurrLoadPointProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"CurrLoadPoint": {
									"value": {
										"value": "@variables('varCurrLoadPoint')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataLoadTag": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								},
								"SSISProject": {
									"value": {
										"value": "@variables('varSSISProject')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"varStgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"varOdsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					},
					"varLoadSQL": {
						"type": "String",
						"defaultValue": "select name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published from dbo.src_object"
					},
					"varTruncateProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"varETLWorkGetPrevLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Get"
					},
					"varSSISProject": {
						"type": "String",
						"defaultValue": "Common_ADF"
					},
					"varPrevLoadPoint": {
						"type": "String"
					},
					"varConfigurationId": {
						"type": "Integer"
					},
					"varETLWorkGetCurrentLoadPointSQLProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_CurrLoadPointTSQL_Get"
					},
					"varCurrentLoadPointSQL": {
						"type": "String"
					},
					"varCurrLoadPoint": {
						"type": "String"
					},
					"varCurrRowCnt": {
						"type": "Integer"
					},
					"varETLWorkSaveCurrLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Update"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-12T07:27:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_ukk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_ukk",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo/ETLDemo/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/"
							},
							{
								"name": "Destination",
								"value": "dbo.AzureBlobStorageFile"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "订单ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "订单ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "订单日期",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "订单日期",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "发货日期",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "发货日期",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "邮寄方式",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "邮寄方式",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "客户ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "客户ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "城市",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "城市",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "产品ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "产品ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "销售额",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "销售额",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "数量",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "数量",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "折扣",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "折扣",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "利润",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "利润",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ukk",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "ETLDemo/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ukk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyfromDB_using_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Column_Name} as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select MAX(',pipeline().parameters.Data_Source_WaterMarkColumn, ') as NewWatermarkValue from ',pipeline().parameters.Data_Source_Table_Name)",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureSqlDatabaseDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataDestination",
								"type": "DatasetReference",
								"parameters": {
									"Data_Destination_Container": {
										"value": "@pipeline().parameters.Data_Destination_Container",
										"type": "Expression"
									},
									"Data_Destination_Directory": {
										"value": "@pipeline().parameters.Data_Destination_Directory",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureParameters": {
								"LastModifyDate": {
									"value": {
										"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
										"type": "Expression"
									},
									"type": "datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "adfdemo_asql_dst",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String"
					},
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String"
					},
					"Control_Table_Column_Name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadate_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of file",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_stroage_dataset_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure",
								"columnCount",
								"contentMD5",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "adfdemo",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_asql_dataset_city",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T08:26:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[UpdateWatermarkColumnValue_m06]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "adfdemo_asql_dst",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															},
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetVar_Set Var access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web_Get AccessToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AccessToken').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetVar_Set Var access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecPL_Department_TTL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TTL_Department",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"access_token": {
												"value": "@variables('access_token')",
												"type": "Expression"
											},
											"dt": {
												"value": "@pipeline().parameters.dt",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ExecPL_User_TTL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TTL_User",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"access_token": {
												"value": "@variables('access_token')",
												"type": "Expression"
											},
											"dt": {
												"value": "@pipeline().parameters.dt",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Web_Get AccessToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{pipeline().parameters.corpid}&corpsecret=@{pipeline().parameters.corpsecret}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"corpid": {
						"type": "string",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "string",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-07-25"
					}
				},
				"variables": {
					"access_token": {
						"type": "String"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web_Get AcceccTokenObj",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SVar_Set Var accecc_token",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web_Get AcceccTokenObj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AcceccTokenObj').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['errcode']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "$['errmsg']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['department'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['position']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['enable']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['isleader']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['type']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['text']['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['hide_mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['english_name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['telephone']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['order'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['main_department']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['qr_code']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['alias']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['is_leader_in_dept'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['thumb_avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['biz_mail']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['userid']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['direct_leader'][0]"
										},
										"sink": {}
									}
								],
								"collectionReference": "$['userlist']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestBody": {
										"value": "corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_HTTP_QYWeChat_Login",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {}
						},
						"linkedServiceName": {
							"referenceName": "LS_WEB_QYWeChat_Login",
							"type": "LinkedServiceReference",
							"parameters": {
								"corpid": {
									"value": "@variables('corpid')",
									"type": "Expression"
								},
								"corpsecret": {
									"value": "@variables('corpsecret')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['errcode']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "$['errmsg']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['department'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['position']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['enable']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['isleader']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['type']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['text']['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['hide_mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['english_name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['telephone']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['order'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['main_department']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['qr_code']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['alias']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['is_leader_in_dept'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['thumb_avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['biz_mail']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['userid']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['direct_leader'][0]"
										},
										"sink": {}
									}
								],
								"collectionReference": "$['userlist']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"corpid": {
						"type": "String",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "String",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"access_token": {
						"type": "String",
						"defaultValue": "jhAT-nUmGL0F2MDjHOQh7V5oCb9R2lqdUmSy_RnNzjzSQPkYK5OrVNPh_3bZcl3FskfGz5uLF4KNcN5uHFfAEzqo_jbgBN1S7d85Ia0rHZCBg9AMeEx5yYt0z1pFrvDgkjY29EV3JYGSinPXt6zb30-AduxqU8AaVs6jKQBVdz81GnuLWF2jxl_5kNmrUFjS2ZQBTrgnsSvJ8rlADMUvZQ"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_excel_to_asql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "file-data/adfdemo/Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "FileName",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirsrtName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "storge_excel_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_employeedemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_mssql_asql_employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mssql_adfemo_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-14T04:07:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aishu_excel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": "0.00:10:00"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "pbi_xuqiu_ds_excel",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_to_asql_stg_adfdemo_object')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.src_adfdemo_object"
							},
							{
								"name": "Destination",
								"value": "dbo.stg_adfdemo_object"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_dataset_src_adfdemo_object",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_stg_adfdemo_object",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T03:02:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_to_asql_stg_adfdemo_object1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.src_adfdemo_object"
							},
							{
								"name": "Destination",
								"value": "dbo.stg_adfdemo_object"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_dataset_src_adfdemo_object1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_stg_adfdemo_object1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-24T07:01:23Z"
			},
			"dependsOn": []
		}
	]
}