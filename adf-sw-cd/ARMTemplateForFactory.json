{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-sw-cd"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"LS_ADB_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LS_ADB'"
		},
		"LS_ADB_Job_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LS_ADB_Job'"
		},
		"LS_ASQL_Demo_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_ASQL_Demo'"
		},
		"LS_Blob_File_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Blob_File'"
		},
		"LS_Deltalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Deltalake'"
		},
		"LS_REST_QYWeChat_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_REST_QYWeChat'"
		},
		"adfdemo_a_sql_src_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_a_sql_src'"
		},
		"adfdemo_asql_dst_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_asql_dst'"
		},
		"adfdemo_asql_src_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_asql_src'"
		},
		"adfdemo_mssql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_mssql'"
		},
		"adfdemo_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfdemo_storage'"
		},
		"fs_offline_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'fs_offline'"
		},
		"http_aishu_site_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'http_aishu_site'"
		},
		"http_onedriver_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'http_onedriver'"
		},
		"mssql_adfdemo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mssql_adfdemo'"
		},
		"mssql_demo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mssql_demo'"
		},
		"rest_qyweb_userlist_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'rest_qyweb_userlist'"
		},
		"sqldb_dw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqldb_dw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().dbServerName};Initial Catalog=@{linkedService().dbName};User ID=@{linkedService().dbUserName};Password=@{linkedService().dbUserPwd}"
		},
		"storage_account_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'storage_account'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().keyVaultAccountURL}"
		},
		"LS_ADB_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0723-022831-hgfjeows"
		},
		"LS_ASQL_Demo_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azuresqlstxserver.database.windows.net"
		},
		"LS_ASQL_Demo_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfstudy"
		},
		"LS_ASQL_Demo_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "cdstx"
		},
		"LS_Deltalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://databricksucextadls2.dfs.core.windows.net/"
		},
		"LS_HTTP_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/"
		},
		"LS_REST_QYWX_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin"
		},
		"LS_REST_QYWeChat_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin"
		},
		"LS_REST_QYWeChat_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rest"
		},
		"LS_REST_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@linkedService().corpid&corpsecret=@linkedService().corpsecret"
		},
		"LS_WEB_QYWeChat_Login_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{linkedService().corpid}&corpsecret=@{linkedService().corpsecret}"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cumminsxian--uat.sandbox.my.salesforce-sites.com/XCECBOM/services/apexrest/Callout_Order_BySites"
		},
		"adfdemo_rest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.xygeng.cn/one"
		},
		"adfdemo_rest_opentdb_com_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opentdb.com/api.php?amount=10&category=23&difficulty=easy&type=multiple"
		},
		"fs_offline_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\10.0.0.163\\00FileDataSource"
		},
		"fs_offline_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "sw01"
		},
		"http_aishu_site_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://share.chinaust.com:8000"
		},
		"http_aishu_site_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "lilijuan"
		},
		"http_onedriver_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sharewinfobi-my.sharepoint.com/"
		},
		"http_onedriver_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "zhyding@sharewinfobi.onmicrosoft.com"
		},
		"opentdb_api_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"rest_qyweb_userlist_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://qyapi.weixin.qq.com/cgi-bin/user/simplelist?access_token=@{linkedService().access_token}&department_id=1&fetch_child=1&status=0"
		},
		"rest_qyweb_userlist_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rest"
		},
		"Trigger_ukk_properties_CopyPipeline_ukk_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().scheduledTime"
		},
		"trg_sch_retail_properties_retail_master_parameters_container": {
			"type": "string",
			"defaultValue": "file-data"
		},
		"trg_sch_retail_properties_retail_master_parameters_dstContainer": {
			"type": "string",
			"defaultValue": "demo"
		},
		"trg_sch_retail_properties_retail_master_parameters_dstCatalog": {
			"type": "string",
			"defaultValue": "project_catalog"
		},
		"trg_sch_retail_properties_retail_master_parameters_dt": {
			"type": "string",
			"defaultValue": "@{string(formatDateTime(addDays(addHours(trigger().scheduledTime, 8), -1),'yyyy-MM-dd'))}"
		},
		"trg_sch_retail_properties_retail_master_parameters_daysOffset": {
			"type": "int",
			"defaultValue": -1
		},
		"trg_sch_retail_properties_retail_master_parameters_date_start": {
			"type": "string",
			"defaultValue": "2020-01-01"
		},
		"trg_sch_retail_properties_retail_master_parameters_date_end": {
			"type": "string",
			"defaultValue": "2024-12-31"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01_template_src_ods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varTruncateProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Get Prev Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetPrevLoadPointProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varPrevLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varPrevLoadPoint",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.PrevLoadPoint",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varConfigurationId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Prev Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varConfigurationId",
							"value": {
								"value": "@activity('Get Prev Load Point').output.firstRow.ConfigurationId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move src to stg",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set varPrevLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varConfigurationId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    variables('varLoadSQL'),\n    ' where modify_date > ''', \n    variables('varPrevLoadPoint'), \n    ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Current Load Point SQL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "move src to stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('varETLWorkGetCurrentLoadPointSQLProcNameWithSchema')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"DataLoadTag": {
										"type": "String",
										"value": {
											"value": "@variables('varStgTableNameWithSchema')",
											"type": "Expression"
										}
									},
									"SSISProject": {
										"type": "String",
										"value": {
											"value": "@variables('varSSISProject')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrentLoadPointSQL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Current Load Point SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrentLoadPointSQL",
							"value": {
								"value": "@activity('Get Current Load Point SQL').output.firstRow.CurrLoadPointTSQL",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Curr Load Point",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set varCurrentLoadPointSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('varCurrentLoadPointSQL')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							}
						}
					},
					{
						"name": "Set varCurrLoadPoint",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrLoadPoint",
							"value": {
								"value": "@string(activity('Get Curr Load Point').output.firstRow.CurrLoadPoint)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set varCurrRowCnt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Curr Load Point",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varCurrRowCnt",
							"value": {
								"value": "@activity('Get Curr Load Point').output.firstRow.RowCnt",
								"type": "Expression"
							}
						}
					},
					{
						"name": "move stg to ods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set varCurrLoadPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varCurrRowCnt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varOdsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Save Curr Point Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "move stg to ods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('varETLWorkSaveCurrLoadPointProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"CurrLoadPoint": {
									"value": {
										"value": "@variables('varCurrLoadPoint')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataLoadTag": {
									"value": {
										"value": "@variables('varStgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								},
								"SSISProject": {
									"value": {
										"value": "@variables('varSSISProject')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"varStgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"varOdsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					},
					"varLoadSQL": {
						"type": "String",
						"defaultValue": "select name, object_id, principal_id, schema_id, parent_object_id, type, type_desc, create_date, modify_date, is_ms_shipped, is_published, is_schema_published from dbo.src_object"
					},
					"varTruncateProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"varETLWorkGetPrevLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Get"
					},
					"varSSISProject": {
						"type": "String",
						"defaultValue": "Common_ADF"
					},
					"varPrevLoadPoint": {
						"type": "String"
					},
					"varConfigurationId": {
						"type": "Integer"
					},
					"varETLWorkGetCurrentLoadPointSQLProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_CurrLoadPointTSQL_Get"
					},
					"varCurrentLoadPointSQL": {
						"type": "String"
					},
					"varCurrLoadPoint": {
						"type": "String"
					},
					"varCurrRowCnt": {
						"type": "Integer"
					},
					"varETLWorkSaveCurrLoadPointProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.USP_DL_Configuration_LoadPoint_Update"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-12T07:27:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_re3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_re3",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "file-data/demo/ssiswork/订单数据/"
							},
							{
								"name": "Destination",
								"value": "dbo.Order"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.windowStart",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.windowEnd",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_re3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_re3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"ifTrueActivities": [
								{
									"name": "Filter1",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-19T08:32:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_re3')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_re3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_ukk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_ukk",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo/ETLDemo/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/"
							},
							{
								"name": "Destination",
								"value": "dbo.AzureBlobStorageFile"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "订单ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "订单ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "订单日期",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "订单日期",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "发货日期",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "发货日期",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "邮寄方式",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "邮寄方式",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "客户ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "客户ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "城市",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "城市",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "产品ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "产品ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "销售额",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "销售额",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "数量",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "数量",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "折扣",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "折扣",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "利润",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "利润",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ukk",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "ETLDemo/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ukk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_ukk')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_ukk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyfromDB_using_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Column_Name} as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select MAX(',pipeline().parameters.Data_Source_WaterMarkColumn, ') as NewWatermarkValue from ',pipeline().parameters.Data_Source_Table_Name)",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureSqlDatabaseDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataDestination",
								"type": "DatasetReference",
								"parameters": {
									"Data_Destination_Container": {
										"value": "@pipeline().parameters.Data_Destination_Container",
										"type": "Expression"
									},
									"Data_Destination_Directory": {
										"value": "@pipeline().parameters.Data_Destination_Directory",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureParameters": {
								"LastModifyDate": {
									"value": {
										"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
										"type": "Expression"
									},
									"type": "datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "adfdemo_asql_dst",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String"
					},
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String"
					},
					"Control_Table_Column_Name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseExternal_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseDataSource')]",
				"[concat(variables('factoryId'), '/datasets/DataDestination')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadate_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of file",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_stroage_dataset_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure",
								"columnCount",
								"contentMD5",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "adfdemo",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_asql_dataset_city",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T08:26:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_stroage_dataset_excel')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_storage_dataset')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_city')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	},
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[UpdateWatermarkColumnValue_m06]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "adfdemo_asql_dst",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_m06_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_m06_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															},
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_m06_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_m06_DestinationDS')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask_m06_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_m06_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_m06_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_m06_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_m06_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask_m06_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.MainControlTable_m06"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": [
					"MetadataDrivenSolution"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_m06_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask_m06_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_Department')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "department/list?access_token=@{pipeline().parameters.access_token}&id=",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"container": "adfdemo",
									"directory": {
										"value": "@concat('QYWeChat/DepartmentTTL/dt=', pipeline().parameters.dt)",
										"type": "Expression"
									},
									"file": "department"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"access_token": {
						"type": "string",
						"defaultValue": "0b928-07iz0vD_PMKehJMKAixL6qeypZ-GenBIJXzXdPXGOuwr77oreccrNcoZGKnM7xfRnT9v5Bcat1U-UDd_JjvB_xNltUwwUe_LdhPLUlpNUPWypXRddj85mz_i2P_0Kn-BTqqEwakqusBtx-DaHw_SWunU6_9pRzYSJN1Ji4fxT_a53YoTUirYoWpVKqyL7mGyjo4WiHQx7o4phRpw"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-06-10"
					}
				},
				"folder": {
					"name": "QyWeChat/TTL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_REST_QYWeChat')]",
				"[concat(variables('factoryId'), '/datasets/DS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetVar_Set Var access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web_Get AccessToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AccessToken').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetVar_Set Var access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecPL_Department_TTL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TTL_Department",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"access_token": {
												"value": "@variables('access_token')",
												"type": "Expression"
											},
											"dt": {
												"value": "@pipeline().parameters.dt",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ExecPL_User_TTL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TTL_User",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"access_token": {
												"value": "@variables('access_token')",
												"type": "Expression"
											},
											"dt": {
												"value": "@pipeline().parameters.dt",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Web_Get AccessToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{pipeline().parameters.corpid}&corpsecret=@{pipeline().parameters.corpsecret}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"corpid": {
						"type": "string",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "string",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-07-25"
					}
				},
				"variables": {
					"access_token": {
						"type": "String"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TTL_Department')]",
				"[concat(variables('factoryId'), '/pipelines/TTL_User')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web_Get AcceccTokenObj",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SVar_Set Var accecc_token",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web_Get AcceccTokenObj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AcceccTokenObj').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['errcode']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "$['errmsg']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['department'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['position']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['enable']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['isleader']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['type']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['text']['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['hide_mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['english_name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['telephone']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['order'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['main_department']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['qr_code']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['alias']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['is_leader_in_dept'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['thumb_avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['biz_mail']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['userid']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['direct_leader'][0]"
										},
										"sink": {}
									}
								],
								"collectionReference": "$['userlist']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestBody": {
										"value": "corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_HTTP_QYWeChat_Login",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {}
						},
						"linkedServiceName": {
							"referenceName": "LS_WEB_QYWeChat_Login",
							"type": "LinkedServiceReference",
							"parameters": {
								"corpid": {
									"value": "@variables('corpid')",
									"type": "Expression"
								},
								"corpsecret": {
									"value": "@variables('corpsecret')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['errcode']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "$['errmsg']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['department'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['position']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['enable']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['isleader']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['type']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['extattr']['attrs'][0]['text']['value']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['hide_mobile']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['english_name']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['telephone']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['order'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['main_department']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['qr_code']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['alias']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['is_leader_in_dept'][0]"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['thumb_avatar']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['biz_mail']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['userid']"
										},
										"sink": {}
									},
									{
										"source": {
											"path": "[['direct_leader'][0]"
										},
										"sink": {}
									}
								],
								"collectionReference": "$['userlist']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"corpid": {
						"type": "String",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "String",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"access_token": {
						"type": "String",
						"defaultValue": "jhAT-nUmGL0F2MDjHOQh7V5oCb9R2lqdUmSy_RnNzjzSQPkYK5OrVNPh_3bZcl3FskfGz5uLF4KNcN5uHFfAEzqo_jbgBN1S7d85Ia0rHZCBg9AMeEx5yYt0z1pFrvDgkjY29EV3JYGSinPXt6zb30-AduxqU8AaVs6jKQBVdz81GnuLWF2jxl_5kNmrUFjS2ZQBTrgnsSvJ8rlADMUvZQ"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_REST_QYWeChat')]",
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]",
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_QYWeChat_Login')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_WEB_QYWeChat_Login')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTL_User')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_REST_QYWeChat",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "user/list?access_token=@{pipeline().parameters.access_token}&department_id=1&fetch_child=1&status=0",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"container": "adfdemo",
									"directory": {
										"value": "@concat('QYWeChat/UserTTL/dt=', pipeline().parameters.dt)",
										"type": "Expression"
									},
									"file": "user"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"access_token": {
						"type": "string",
						"defaultValue": "0b928-07iz0vD_PMKehJMKAixL6qeypZ-GenBIJXzXdPXGOuwr77oreccrNcoZGKnM7xfRnT9v5Bcat1U-UDd_JjvB_xNltUwwUe_LdhPLUlpNUPWypXRddj85mz_i2P_0Kn-BTqqEwakqusBtx-DaHw_SWunU6_9pRzYSJN1Ji4fxT_a53YoTUirYoWpVKqyL7mGyjo4WiHQx7o4phRpw"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-06-10"
					}
				},
				"folder": {
					"name": "QyWeChat/TTL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_REST_QYWeChat')]",
				"[concat(variables('factoryId'), '/datasets/DS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_excel_to_asql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "file-data/adfdemo/Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "FileName",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirsrtName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "storge_excel_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_employeedemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storge_excel_customer')]",
				"[concat(variables('factoryId'), '/datasets/asql_employeedemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_mssql_asql_employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mssql_adfemo_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-14T04:07:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mssql_adfemo_employee')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aishu_excel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": "0.00:10:00"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "pbi_xuqiu_ds_excel",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pbi_xuqiu_ds_excel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_to_asql_stg_adfdemo_object')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.src_adfdemo_object"
							},
							{
								"name": "Destination",
								"value": "dbo.stg_adfdemo_object"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_dataset_src_adfdemo_object",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_stg_adfdemo_object",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T03:02:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_src_adfdemo_object')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_stg_adfdemo_object')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_to_asql_stg_adfdemo_object1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.src_adfdemo_object"
							},
							{
								"name": "Destination",
								"value": "dbo.stg_adfdemo_object"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_dataset_src_adfdemo_object1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_stg_adfdemo_object1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-24T07:01:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_src_adfdemo_object1')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_stg_adfdemo_object1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_to_asql_stg_adfdemo_object2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.src_adfdemo_object"
							},
							{
								"name": "Destination",
								"value": "dbo.stg_adfdemo_object"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_dataset_src_adfdemo_object2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_stg_adfdemo_object2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-24T07:14:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_src_adfdemo_object2')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_stg_adfdemo_object2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_excel_to_asql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo//Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirsrtName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_blob_dataset_excel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T02:43:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_blob_dataset_excel')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_excel_to_asql_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo//Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FIleName",
										"value": "$$FILENAME"
									},
									{
										"name": "FilePath",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FilePath",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FIleName",
											"type": "String"
										},
										"sink": {
											"name": "file_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProdunctId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Qty",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "qty",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "unit_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "SubTotal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "subtotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_storage_ds_plat",
								"type": "DatasetReference",
								"parameters": {
									"container": "adfdemo",
									"directory": "employee",
									"file": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "project_sales"
								}
							}
						]
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo//Employee Demo.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.EmployeeDemo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "storage_binary",
								"type": "DatasetReference",
								"parameters": {
									"contrainerName": "adfdemo",
									"directoryName": "employee",
									"fileName": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "storage_binary",
								"type": "DatasetReference",
								"parameters": {
									"contrainerName": "adfdemo",
									"directoryName": "employee2",
									"fileName": " "
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T02:43:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_storage_ds_plat')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]",
				"[concat(variables('factoryId'), '/datasets/storage_binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_to_stg_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"enableStaging": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "sales"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobstorage_excel_column_duplicated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "file_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProdunctId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Qty",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "qty",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "unit_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "SubTotal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "subtotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Qty",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "qty2",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blobstorage_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "demo/sales",
									"file": "Sales_2021.xlsx",
									"sheet": "Sheet1",
									"range": "A1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "stg_sales"
								}
							}
						]
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {},
										"sink": {
											"name": "insert_dt",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {},
										"sink": {
											"name": "update_dt",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {},
										"sink": {
											"name": "file_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {},
										"sink": {
											"name": "file_last_modifty_time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Qty",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "qty",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {},
										"sink": {
											"name": "unit_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "SubTotal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "subtotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blobstorage_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "demo/sales",
									"file": "Sales_Demo_2022.xlsx",
									"sheet": "Sheet1",
									"range": "A3:E9999"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "stg_sales"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/blobstorage_ds_excel')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_blob_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_bronze_blob_retail_transaction",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_blob_retail_transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"dstContainer": {
									"value": "@pipeline().parameters.dstContainer",
									"type": "Expression"
								},
								"dt": {
									"value": "@pipeline().parameters.dt",
									"type": "Expression"
								},
								"daysOffset": {
									"value": "@pipeline().parameters.daysOffset",
									"type": "Expression"
								},
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"dstContainer": {
						"type": "string",
						"defaultValue": "demo"
					},
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-01-01"
					},
					"daysOffset": {
						"type": "int",
						"defaultValue": -1000
					}
				},
				"folder": {
					"name": "retail/bronze/blob"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bronze_blob_retail_transaction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_blob_retail_transaction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_extract src to stage file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addDays(pipeline().parameters.dt,pipeline().parameters.daysOffset)",
										"type": "Expression"
									},
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.path",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.file",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "Seq",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Transaction_ID",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Customer_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "Product",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "Total_Item",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Total_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "Payment_Method",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "City",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "Store_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Discount_Applied",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "Customer_Category",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "Season",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "Promotion",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "year",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Blob_CSV",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"path": {
										"value": "@pipeline().parameters.path",
										"type": "Expression"
									},
									"file": " ",
									"hasRowHeader": {
										"value": "@pipeline().parameters.hasRowHeader",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Deltalake_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.dstContainer",
										"type": "Expression"
									},
									"path": {
										"value": "@{pipeline().parameters.dstFileDirPath}/@{variables('dstFileDirName')}/dt=@{pipeline().parameters.dt}",
										"type": "Expression"
									},
									"file": {
										"value": "@variables('dstFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "nbk_bronze_blob_retail_transaction",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "copy_extract src to stage file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@variables('notebookPath')",
								"type": "Expression"
							},
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"dt": {
									"value": "@pipeline().parameters.dt",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"path": {
						"type": "string",
						"defaultValue": "retail/retail_transaction"
					},
					"file": {
						"type": "string",
						"defaultValue": "*.csv"
					},
					"hasRowHeader": {
						"type": "bool",
						"defaultValue": false
					},
					"dstContainer": {
						"type": "string",
						"defaultValue": "demo"
					},
					"dstFileDirPath": {
						"type": "string",
						"defaultValue": "retail/blob/bronze"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-01-01"
					},
					"daysOffset": {
						"type": "int",
						"defaultValue": -1000
					},
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					}
				},
				"variables": {
					"dstFileDirName": {
						"type": "String",
						"defaultValue": "stage_blob_retail_transaction"
					},
					"dstFile": {
						"type": "String",
						"defaultValue": "retail_transaction.parquet"
					},
					"notebookPath": {
						"type": "String",
						"defaultValue": "/retail/dml/bronze/blob_retail_transaction"
					}
				},
				"folder": {
					"name": "retail/bronze/blob/detail"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_Deltalake_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control flow demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ARR",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varValue",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ARR",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varValue",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"cases": [
								{
									"value": "Case1"
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, 2)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "loop_value",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select top (10) object_id, name from sys.objects;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": " ",
									"tableName": " "
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ARR": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5
						]
					}
				},
				"variables": {
					"varValue": {
						"type": "Integer"
					},
					"loop_value": {
						"type": "Integer"
					},
					"animal": {
						"type": "String"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T06:28:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_activity_common')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "name",
							"value": {
								"value": "@concat('Baba', '''s', ' store')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "msql_demo_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Para animalsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.animalsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item(), 'Dog')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Parameter numsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.numsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Parameter itemsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.itemsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(int(item().value), 5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Filter Parameter numsArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Parameter numsArray').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "animal",
										"value": {
											"value": "@string(item())",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "dbo.usp_objects_get",
								"storedProcedureParameters": {
									"type": {
										"type": "String",
										"value": "P"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "msql_demo_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.routeSelected, 'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable4",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "name",
										"value": "N"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "name",
										"value": "Y"
									}
								}
							]
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Set variable5",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "name",
							"value": "234"
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('route')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "A",
									"activities": [
										{
											"name": "Set variable6",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "name",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "B",
									"activities": [
										{
											"name": "Set variable8",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "name",
												"value": "2"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Set variable7",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "name",
										"value": "0"
									}
								}
							]
						}
					},
					{
						"name": "clean table",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[p_truncate_table]",
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": "dbo.employee",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mssql_adfdemo",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "name",
								"value": "123"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_objects_get]",
							"storedProcedureParameters": {
								"type": {
									"value": "U",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mssql_demo",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "TestDataSource"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "animalsArray",
							"value": "1235"
						}
					},
					{
						"name": "Append variable2",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "animalsArray",
							"value": "254"
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Append variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('animalsArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable9",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "name",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "TestDataSource"
					},
					"schemaName": {
						"type": "string",
						"defaultValue": "sys"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "objects"
					},
					"animalsArray": {
						"type": "array",
						"defaultValue": [
							"Dog",
							"Cat",
							"Bear",
							"Bird"
						]
					},
					"numsArray": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					},
					"itemsArray": {
						"type": "array",
						"defaultValue": [
							{
								"name": "name1",
								"value": "1"
							},
							{
								"name": "name2",
								"value": "2"
							},
							{
								"name": "name3",
								"value": "3"
							}
						]
					},
					"routeSelected": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"variables": {
					"name": {
						"type": "String",
						"defaultValue": "12356"
					},
					"animal": {
						"type": "String"
					},
					"allDependSuccess": {
						"type": "Boolean",
						"defaultValue": false
					},
					"route": {
						"type": "String",
						"defaultValue": "B"
					},
					"animalsArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-23T04:49:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/msql_demo_dataset')]",
				"[concat(variables('factoryId'), '/linkedServices/mssql_adfdemo')]",
				"[concat(variables('factoryId'), '/linkedServices/mssql_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_activity_other')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "control_activity_common",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://www.baidu.com",
							"connectVia": {
								"referenceName": "TutorialIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "",
							"errorCode": ""
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.baidu.com",
							"method": "POST",
							"headers": {},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": false
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": " ",
									"tableName": " "
								}
							}
						],
						"outputs": [
							{
								"referenceName": "msql_demo_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "b",
									"dbName": "TestDataSource"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-23T04:49:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/control_activity_common')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]",
				"[concat(variables('factoryId'), '/datasets/msql_demo_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_filter_https-api-xygeng-cn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://api.xygeng.cn/one",
				"activities": [
					{
						"name": "Filter Parameter animalsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.animalsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(item(), 'Bear'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Parameter numsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.numsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item(), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Paramter itemsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.itemsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(int(item().value), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.animalsArray",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "animal",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    utcNow(variables('srcInsertDate')), \n    utcNow(variables('dstInsertDate'))\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "srcHasData",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable3",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "animal",
							"value": "145"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{pipeline().parameters.restRelativeURL}"
							},
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_one'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['difficulty']"
										},
										"sink": {
											"name": "difficulty",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['question']"
										},
										"sink": {
											"name": "question",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['correct_answer']"
										},
										"sink": {
											"name": "correct_answer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['incorrect_answers']"
										},
										"sink": {
											"name": "incorrect_answers",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['results']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@pipeline().parameters.restRelativeURL",
										"type": "Expression"
									},
									"baseURL": {
										"value": "@pipeline().parameters.restBaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "adfdemo_rest_one"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"animalsArray": {
						"type": "array",
						"defaultValue": [
							"Dog",
							"Cat",
							"Bear",
							"Bird"
						]
					},
					"numsArray": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					},
					"itemsArray": {
						"type": "array",
						"defaultValue": [
							{
								"name": "name1",
								"value": "1"
							},
							{
								"name": "name2",
								"value": "2"
							},
							{
								"name": "name3",
								"value": "3"
							}
						]
					},
					"restBaseURL": {
						"type": "string",
						"defaultValue": "https://api.xygeng.cn"
					},
					"restRelativeURL": {
						"type": "string",
						"defaultValue": "one"
					}
				},
				"variables": {
					"animal": {
						"type": "String"
					},
					"srcInsertDate": {
						"type": "String",
						"defaultValue": "2020-12-30"
					},
					"dstInsertDate": {
						"type": "String",
						"defaultValue": "2020-12-29"
					},
					"srcHasData": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T07:52:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_filter_rest_https_opentdb_com')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://opentdb.com/api.php?amount=10&category=23&difficulty=easy&type=multiple",
				"activities": [
					{
						"name": "Filter Parameter animalsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.animalsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(item(), 'Bear'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Parameter numsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.numsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item(), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter Paramter itemsArray",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.itemsArray",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(int(item().value), 3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.animalsArray",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "animal",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    utcNow(variables('srcInsertDate')), \n    utcNow(variables('dstInsertDate'))\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "srcHasData",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable3",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "animal",
							"value": "145"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{pipeline().parameters.restRelativeURL}"
							},
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_one'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['difficulty']"
										},
										"sink": {
											"name": "difficulty",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['question']"
										},
										"sink": {
											"name": "question",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['correct_answer']"
										},
										"sink": {
											"name": "correct_answer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['incorrect_answers']"
										},
										"sink": {
											"name": "incorrect_answers",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['results']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@pipeline().parameters.restRelativeURL",
										"type": "Expression"
									},
									"baseURL": {
										"value": "@pipeline().parameters.restBaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_dataset",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "adfdemo_rest_two"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"animalsArray": {
						"type": "array",
						"defaultValue": [
							"Dog",
							"Cat",
							"Bear",
							"Bird"
						]
					},
					"numsArray": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					},
					"itemsArray": {
						"type": "array",
						"defaultValue": [
							{
								"name": "name1",
								"value": "1"
							},
							{
								"name": "name2",
								"value": "2"
							},
							{
								"name": "name3",
								"value": "3"
							}
						]
					},
					"restBaseURL": {
						"type": "string",
						"defaultValue": "https://opentdb.com/"
					},
					"restRelativeURL": {
						"type": "string",
						"defaultValue": "api.php?amount=10&category=23&difficulty=easy&type=multiple"
					}
				},
				"variables": {
					"animal": {
						"type": "String"
					},
					"srcInsertDate": {
						"type": "String",
						"defaultValue": "2020-12-30"
					},
					"dstInsertDate": {
						"type": "String",
						"defaultValue": "2020-12-29"
					},
					"srcHasData": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T07:52:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/control_getmetadate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_asql_employee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"columnCount",
								"structure"
							]
						}
					},
					{
						"name": "Get Metadata1_copy1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storge_excel_customer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"contentMD5",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": "file-data",
									"directoryName": "demo/demofile",
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('Failed', coalesce(body('MyUnauthenticatedActivity')?.status, actions('MyUnauthenticatedActivity')?.status, 'null'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "MyUnauthenticatedActivity",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "MyWaitActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"Content-Type": "application/json"
										},
										"url": "https://www.fake.com/"
									}
								},
								{
									"name": "MyWaitActivity",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "3",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Case1"
								},
								{
									"value": "Case2"
								},
								{
									"value": "Case3"
								}
							],
							"defaultActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "animalsArray",
							"value": {
								"value": "Cat",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "name",
							"value": {
								"value": "123",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('animalsArray')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "name",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"headers": {}
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"timeout": "00:10:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string",
						"defaultValue": "file-data/demo/demofile"
					},
					"outputPath1": {
						"type": "string",
						"defaultValue": "file-data/demo/demofileoutput1"
					},
					"outputPath2": {
						"type": "string",
						"defaultValue": "file-data/demo/demofileoutput2"
					},
					"outputPath3": {
						"type": "string",
						"defaultValue": "file-data/demo/demofileoutput2"
					},
					"routeSelect": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"name": {
						"type": "String"
					},
					"animalsArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-18T09:40:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_employee')]",
				"[concat(variables('factoryId'), '/datasets/storge_excel_customer')]",
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/storage_binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy data loop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select \n\tt1.src, t1.stg\nfrom (values \n\t(N'dbo.src_demo_product', N'dbo.stg_demo_product'),\n\t(N'dbo.src_demo_customer', N'dbo.stg_demo_customer')\n) t1 (src, stg)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@item().src",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@item().stg",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-14T10:24:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_data_from_dir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data_listfile",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "filesystem_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"directory": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据/Sample",
									"file": " ",
									"sheet": "Sheet1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": "dbo.order"
								}
							}
						]
					},
					{
						"name": "Copy data1_copy_filepath",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"fileFilter": "*.xlsx"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "filesystem_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"directory": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据/Sample",
									"file": " ",
									"sheet": "Sheet1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": "dbo.order"
								}
							}
						]
					},
					{
						"name": "Copy data1_copy_filepathindataset",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "filesystem_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"directory": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据/Sample",
									"file": " ",
									"sheet": "Sheet1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": "dbo.order"
								}
							}
						]
					},
					{
						"name": "Copy data_wildcardfilepath_copy1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFolderPath": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据/Sample",
									"wildcardFileName": "*.xlsx",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "filesystem_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"directory": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据/Sample",
									"file": " ",
									"sheet": "Sheet1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": "dbo.order"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/filesystem_ds_excel')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cummin_restapi_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'cummins_order'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{\n    \"QueryFromDate\": \"2022-09-11\",\n    \"QueryEndDate\": \"2023-01-11\"\n}",
								"additionalHeaders": {
									"Secret": "1e42bb78e138f1dadb925c8bc70462fb"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['SQJSNo']"
										},
										"sink": {
											"name": "SQJSNo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrderNo']"
										},
										"sink": {
											"name": "OrderNo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrderCount']"
										},
										"sink": {
											"name": "OrderCount",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['KAM']"
										},
										"sink": {
											"name": "KAM",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ItemSONo']"
										},
										"sink": {
											"name": "ItemSONo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Createddate']"
										},
										"sink": {
											"name": "Createddate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ContractNo']"
										},
										"sink": {
											"name": "ContractNo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ClientCode']"
										},
										"sink": {
											"name": "ClientCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AccountName']"
										},
										"sink": {
											"name": "AccountName",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['responseData']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "cummins_restapi_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "cummins_order"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cummins_restapi_ds')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_call_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "data flow  select",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink2": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow1_copy1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink2": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-27T02:13:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo_mater')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_sales_pip",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batch_id": 1
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {
									"srcTableNameWithSchema": {
										"value": "'@{variables('dtSrcTableNameWithSchema')}'",
										"type": "Expression"
									},
									"dstTableNameWithSchema": {
										"value": "'@{variables('dfDstTableNameWithSchema')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "powerquery1",
						"type": "ExecuteWranglingDataflow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryasqldataset",
											"dataset": {
												"referenceName": "asql_dataset",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tinsert_dt as timestamp,\n\t\tupdate_dt as timestamp,\n\t\tfile_name as string,\n\t\tfile_last_modifty_time as timestamp,\n\t\tproduct_id as integer,\n\t\tqty as integer,\n\t\tunit_price as decimal(19,4),\n\t\tsubtotal as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UserQueryasqldataset"
										}
									]
								}
							]
						}
					},
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"storageAccountName": "storageswcd"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "5bfaa0a5-c173-40b9-a4bd-87736bdefe7a"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"dfDstTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"dtSrcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sales')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]",
				"[concat(variables('factoryId'), '/datasets/asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/depency demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "123",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1_copy1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If Condition1_copy1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "'ad'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1_copy1_copy1",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varVal1",
							"value": {
								"value": "@int('123')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition3",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1, 1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varVal1",
										"value": {
											"value": "@int('2345')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parVal1": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"varVal1": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-11T06:25:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_excel_data_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.containerName",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@pipeline().parameters.directoryName",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@pipeline().parameters.containerName",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@pipeline().parameters.directoryName",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": {
													"value": "@pipeline().parameters.sheetName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@replace(replace(pipeline().parameters.stgTableNameWithSchema, '[', ''), ']', '')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.p_truncate_table",
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@pipeline().parameters.stgTableNameWithSchema",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "demo/ssiswork/订单数据"
					},
					"sheetName": {
						"type": "string",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "string",
						"defaultValue": "dbo.[Order]"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T07:34:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_excel_data_load_from_filesystem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "filesystem_ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.directoryName",
										"type": "Expression"
									},
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "filesystem_ds_excel",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@pipeline().parameters.directoryName",
													"type": "Expression"
												},
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": {
													"value": "@pipeline().parameters.sheetName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@replace(replace(pipeline().parameters.stgTableNameWithSchema, '[', ''), ']', '')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.p_truncate_table",
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@pipeline().parameters.stgTableNameWithSchema",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'File'), endswith(item().name, '.xlsx'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"directoryName": {
						"type": "string",
						"defaultValue": "00Project_Data_Source/02SSISWork/ProjectSource/订单数据"
					},
					"sheetName": {
						"type": "string",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "string",
						"defaultValue": "dbo.[Order]"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T07:34:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/filesystem_ds_excel')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_src_stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *\nfrom (values\n\t(N'file-data', N'demo/ssiswork/地点数据', N'Sheet1', N'dbo.City'),\n\t(N'file-data', N'demo/ssiswork/产品数据', N'Sheet1', N'dbo.Product'),\n\t(N'file-data', N'demo/ssiswork/客户数据', N'Sheet1', N'dbo.Customer'),\n\t(N'file-data', N'demo/ssiswork/订单数据', N'Sheet1', N'dbo.[Order]')\n) t1(container_name,direcotry_name,sheet_name, stg);",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "file_excel_data_load",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"containerName": {
												"value": "@item().container_name",
												"type": "Expression"
											},
											"directoryName": {
												"value": "@item().direcotry_name",
												"type": "Expression"
											},
											"sheetName": {
												"value": "@item().sheet_name",
												"type": "Expression"
											},
											"stgTableNameWithSchema": {
												"value": "@item().stg",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:05:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]",
				"[concat(variables('factoryId'), '/pipelines/file_excel_data_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_src_stg_error')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "foreach容器不能嵌套foreach容器",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *\nfrom (values\n\t(N'file-data', N'demo/ssiswork/地点数据', N'Sheet1', N'dbo.City'),\n\t(N'file-data', N'demo/ssiswork/产品数据', N'Sheet1', N'dbo.Product'),\n\t(N'file-data', N'demo/ssiswork/客户数据', N'Sheet1', N'dbo.Customer'),\n\t(N'file-data', N'demo/ssiswork/订单数据', N'Sheet1', N'dbo.[Order]')\n) t1(container_name,direcotry_name,sheet_name, stg);",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Stored procedure1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@item().containerName",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@item().directoryName",
													"type": "Expression"
												},
												"fileName": " ",
												"sheetName": " "
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "ForEach1_copy1",
									"type": "ForEach",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get Metadata1').output.childItems",
											"type": "Expression"
										},
										"activities": [
											{
												"name": "Copy data1_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "storage_excel_src",
														"type": "DatasetReference",
														"parameters": {
															"containerName": {
																"value": "@item().containerName",
																"type": "Expression"
															},
															"directoryName": {
																"value": "@item().directoryName",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"sheetName": {
																"value": "@variables('sheetName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "azuresql_dst",
														"type": "DatasetReference",
														"parameters": {
															"tableNameWithSchema": {
																"value": "@replace(replace(item().stg, '[', ''), ']', '')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "dbo.p_truncate_table",
										"storedProcedureParameters": {
											"tableNameWithSchema": {
												"value": {
													"value": "@item().stg",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "sqldb_dw",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"sheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:24:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]",
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_src_stg_from_filesystem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\nselect *\nfrom (values\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/地点数据', N'Sheet1', N'dbo.City'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/产品数据', N'Sheet1', N'dbo.Product'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/客户数据', N'Sheet1', N'dbo.Customer'),\n\t(N'file-data', N'00Project_Data_Source/02SSISWork/ProjectSource/订单数据', N'Sheet1', N'dbo.[Order]')\n) t1(container_name,direcotry_name,sheet_name, stg);",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "file_excel_data_load_from_filesystem",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"directoryName": {
												"value": "@item().direcotry_name",
												"type": "Expression"
											},
											"sheetName": {
												"value": "@item().sheet_name",
												"type": "Expression"
											},
											"stgTableNameWithSchema": {
												"value": "@item().stg",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:05:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]",
				"[concat(variables('factoryId'), '/pipelines/file_excel_data_load_from_filesystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/increament_asql_to_asql_data_source_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select isnull(max(LastModifytime), '1900-01-01') MaxLastModifytime from dbo.data_destination_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_stg_sales"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{'dbo'}.@{'data_source_table'}"
							},
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'data_destination_table'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.data_source_table where \tLastModifytime > '@{activity('Lookup1').output.firstRow.MaxLastModifytime}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PersonID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastModifytime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "LastModifytime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_asql_ds_src",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "data_source_table"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "data_destination_table"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/increament_loop_blob_excel_to_asql_adfdemo_stg_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadate Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Max LastModifyTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_ds",
								"type": "DatasetReference",
								"parameters": {
									"container": "adfdemo",
									"directory": "sales",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addSeconds(addHours(activity('Lookup Max LastModifyTime').output.firstRow.max_file_last_modifty_time, -8), 1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Filter file by extendname",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadate Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadate Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, '.xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter file by extendname",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter file by extendname').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata of file",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "adfdemo_storage_ds",
											"type": "DatasetReference",
											"parameters": {
												"container": "adfdemo",
												"directory": "sales",
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Metadata of file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{'adfdemo'}/@{'sales'}/@{item().name}"
										},
										{
											"name": "Destination",
											"value": "@{'dbo'}.@{'adfdemo_stg_sales'}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "file_name",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "file_last_modifty_time",
													"value": {
														"value": "@addHours(activity('Get Metadata of file').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "file_name",
														"type": "String"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "file_last_modifty_time",
														"type": "String"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "adfdemo_storage_ds",
											"type": "DatasetReference",
											"parameters": {
												"container": "adfdemo",
												"directory": "sales",
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": "Sheet1"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "adfdemo_asql_ds",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "adfdemo_stg_sales"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup Max LastModifyTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select isnull(max(file_last_modifty_time), '1900-01-01') max_file_last_modifty_time from  dbo.adfdemo_stg_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_stg_sales"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_storage_ds')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/loop container')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": "/",
									"directoryName": " ",
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "containerName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"containerName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-31T07:29:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/loop_blob_excel_to_asql_adfdemo_stg_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_ds",
								"type": "DatasetReference",
								"parameters": {
									"container": "adfdemo",
									"directory": "sales",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Metadata of File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{'adfdemo'}/@{'sales'}/@{item().name}"
										},
										{
											"name": "Destination",
											"value": "@{'dbo'}.@{'adfdemo_stg_sales'}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "file_name",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "file_last_modifty_time",
													"value": {
														"value": "@addHours(activity('Get Metadata of File').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "file_name",
														"type": "String"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "file_last_modifty_time",
														"type": "String"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "adfdemo_storage_ds",
											"type": "DatasetReference",
											"parameters": {
												"container": "adfdemo",
												"directory": "sales",
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": "Sheet1"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "adfdemo_asql_ds",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "adfdemo_stg_sales"
											}
										}
									]
								},
								{
									"name": "Get Metadata of File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "adfdemo_storage_ds",
											"type": "DatasetReference",
											"parameters": {
												"container": "adfdemo",
												"directory": "sales",
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_storage_ds')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mssql_to_asql_employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.employee"
							},
							{
								"name": "Destination",
								"value": "dbo.employee"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_mssql_dataset_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset_employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T07:38:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_mssql_dataset_employee')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/object')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "get last modify date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modify_date = isnull(max(modify_date), '1900-01-01') from dbo.ods_object",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('odsTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "src to stg",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get last modify date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    variables('srcTableSQL'), \n\t' where modify_date > ''', activity('get last modify date').output.firstRow.last_modify_date, ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "principal_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "schema_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "parent_object_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "type_desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "create_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "modify_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_ms_shipped",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "is_schema_published",
											"type": "Boolean",
											"physicalType": "bit"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('srcTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "stg to ods",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "src to stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"odsTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.ods_object"
					},
					"srcTableSQL": {
						"type": "String",
						"defaultValue": "select name, object_id, principal_id, schema_id, parent_object_id,\ttype, type_desc, create_date, modify_date, is_ms_shipped, is_published,\tis_schema_published from dbo.src_object"
					},
					"srcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					},
					"odsProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-11T06:43:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/object_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "get last modify date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modify_date = isnull(max(modify_date), '1900-01-01') from dbo.ods_object",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('odsTableNameWithSchema')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "stg to ods",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "get last modify date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"srcTableSQL": {
										"value": "'@{concat(variables('srcTableSQL'),  ' where modify_date>\\''', activity('get last modify date').output.firstRow.last_modify_date,  '\\''')}'",
										"type": "Expression"
									},
									"dstTableNameWithSchema": {
										"value": "'@{variables('stgTableNameWithSchema')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									},
									"sink1": {
										"linkedService": {
											"dbName": "sqldevswcd",
											"dbUserName": "sqladminuser01",
											"dbUserPwd": "1qaz!QAZ",
											"dbServerName": "sqlserverdevswcd.database.windows.net"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_object"
					},
					"odsTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.ods_object"
					},
					"srcTableSQL": {
						"type": "String",
						"defaultValue": "select name, object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published from dbo.src_object"
					},
					"srcTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.src_object"
					},
					"odsProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_object"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T02:32:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select name from sys.objects"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {}
					},
					{
						"name": "Jar1",
						"type": "DatabricksSparkJar",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"parameters": []
						}
					},
					{
						"name": "Python1",
						"type": "DatabricksSparkPython",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"parameters": []
						}
					},
					{
						"name": "Custom1",
						"type": "Custom",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"headers": {}
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"timeout": "00:10:00"
						}
					},
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pq_employee",
								"type": "DataFlowReference",
								"datasetParameters": {
									"adfdemo_asql_dataset_employee": {},
									"UserQueryadfdemoasqldatasetemployee": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryadfdemoasqldatasetemployee",
											"dataset": {
												"referenceName": "adfdemo_asql_dataset_employee",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tFirstName as string,\n\t\tLastName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFirstName,\n\t\tLastName\n\t)) ~> UserQueryadfdemoasqldatasetemployee"
										}
									]
								}
							]
						}
					},
					{
						"name": "Power Query2",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "qp_sales",
								"type": "DataFlowReference",
								"datasetParameters": {
									"adfdemo_asql_dataset": {},
									"adfdemo_asql_ds": {
										"schema": "dbo",
										"table": "stg_sales"
									},
									"UserQueryadfdemoasqlds": {
										"schema": "dbo",
										"table": "ods_sales"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryadfdemoasqlds",
											"dataset": {
												"referenceName": "adfdemo_asql_ds",
												"type": "DatasetReference",
												"parameters": {
													"schema": "dbo",
													"table": "ods_sales"
												}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tinsert_dt as timestamp,\n\t\tupdate_dt as timestamp,\n\t\tfile_name as string,\n\t\tfile_last_modifty_time as timestamp,\n\t\tproduct_id as integer,\n\t\tqty as integer,\n\t\tunit_price as decimal(19,4),\n\t\tsubtotal as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UserQueryadfdemoasqlds"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T05:55:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/dataflows/pq_employee')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/dataflows/qp_sales')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_employee')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web_Get AcceccTokenObj",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@{variables('corpid')}&corpsecret=@{variables('corpsecret')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SVar_Set Var accecc_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web_Get AcceccTokenObj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('Web_Get AcceccTokenObj').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web_Set Department List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/department/list?access_token=@{variables('access_token')}&id",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web_Get User List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://qyapi.weixin.qq.com/cgi-bin/user/list?access_token=@{variables('access_token')}&department_id=1&fetch_child=1&status=0",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SVar_Set Var accecc_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_qiweb_uselist",
								"type": "DatasetReference",
								"parameters": {
									"access_token": {
										"value": "@variables('access_token')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"corpid": {
						"type": "String",
						"defaultValue": "ww6756f2ce4a5f10ff"
					},
					"corpsecret": {
						"type": "String",
						"defaultValue": "VcCpyk0srxuJosFusMfA_mfGzJNrNsdLTPPuqbJ61s0"
					},
					"access_token": {
						"type": "String"
					}
				},
				"folder": {
					"name": "QyWeChat"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_rest_qiweb_uselist')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adfdemo_storage_dataset",
								"type": "DatasetReference",
								"parameters": {
									"container": "file-data",
									"directory": "demo/ssiswork/订单数据/",
									"file": " ",
									"sheet": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "adfdemo_storage_dataset",
											"type": "DatasetReference",
											"parameters": {
												"container": "file-data",
												"directory": "demo/ssiswork/订单数据/",
												"file": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheet": "Sheet1"
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified",
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata3",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "sales",
										"type": "Expression"
									},
									"file": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata3').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2_copy1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Binary",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "sales",
													"type": "Expression"
												},
												"file": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified",
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_storage_dataset')]",
				"[concat(variables('factoryId'), '/datasets/DS_Binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_to_asql_adfdemo_rest_one')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_one'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "false"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['data']['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['data']['tag']"
										},
										"sink": {
											"name": "tag",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['name']"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['origin']"
										},
										"sink": {
											"name": "origin",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['content']"
										},
										"sink": {
											"name": "content",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['created_at']"
										},
										"sink": {
											"name": "created_at",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['data']['updated_at']"
										},
										"sink": {
											"name": "updated_at",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_rest_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_rest_one"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_rest_ds')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_to_asql_adfdemo_rest_two')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "@{'dbo'}.@{'adfdemo_rest_two'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['type']"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['difficulty']"
										},
										"sink": {
											"name": "difficulty",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['question']"
										},
										"sink": {
											"name": "question",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['correct_answer']"
										},
										"sink": {
											"name": "correct_answer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['incorrect_answers']"
										},
										"sink": {
											"name": "incorrect_answers",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['results']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "adfdemo_rest_two"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADFDemo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-20T03:19:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_rest_opentdb_com')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retail_dim_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "nbk_gold_dim_date",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_date",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"date_start": {
									"value": "@pipeline().parameters.date_start",
									"type": "Expression"
								},
								"date_end": {
									"value": "@pipeline().parameters.date_end",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_customer",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_customer",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_city",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_city",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_season",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_season",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_store_type",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_store_type",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_payment_method",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_payment_method",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_promotion",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_promotion",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nbk_gold_dim_product",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/dim_product",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					},
					"date_start": {
						"type": "string",
						"defaultValue": "2020-01-01"
					},
					"date_end": {
						"type": "string",
						"defaultValue": "2024-12-31"
					}
				},
				"folder": {
					"name": "retail/gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retail_fact_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "nbk_gold_fact_retail_transaction",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/gold/fact_retail_transaction",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					}
				},
				"folder": {
					"name": "retail/gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retail_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_bronze_blob_master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"dstContainer": {
									"value": "@pipeline().parameters.dstContainer",
									"type": "Expression"
								},
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"dt": {
									"value": "@pipeline().parameters.dt",
									"type": "Expression"
								},
								"daysOffset": {
									"value": "@pipeline().parameters.daysOffset",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_silver_blob_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_bronze_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "silver_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_dim_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_silver_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_dim_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"date_start": {
									"value": "@pipeline().parameters.date_start",
									"type": "Expression"
								},
								"date_end": {
									"value": "@pipeline().parameters.date_end",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_fact_master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_retail_dim_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_fact_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "job_retail_etl_job",
						"type": "DatabricksJob",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"jobId": "574857699270895",
							"jobParameters": {
								"catalog_name": "project_catalog",
								"dt": "2025-01-01",
								"date_start": "2020-01-01",
								"date_end": "2024-12-31"
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"dstContainer": {
						"type": "string",
						"defaultValue": "demo"
					},
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-01-02"
					},
					"daysOffset": {
						"type": "int",
						"defaultValue": -1000
					},
					"date_start": {
						"type": "string",
						"defaultValue": "2020-01-01"
					},
					"date_end": {
						"type": "string",
						"defaultValue": "2024-01-01"
					}
				},
				"folder": {
					"name": "retail/gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bronze_blob_master')]",
				"[concat(variables('factoryId'), '/pipelines/silver_blob_master')]",
				"[concat(variables('factoryId'), '/pipelines/retail_dim_master')]",
				"[concat(variables('factoryId'), '/pipelines/retail_fact_master')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retail_master_job')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_bronze_blob_master",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"dstContainer": {
									"value": "@pipeline().parameters.dstContainer",
									"type": "Expression"
								},
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"dt": {
									"value": "@pipeline().parameters.dt",
									"type": "Expression"
								},
								"daysOffset": {
									"value": "@pipeline().parameters.daysOffset",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_silver_blob_master",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ep_bronze_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "silver_blob_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_dim_master",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ep_silver_blob_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_dim_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dstCatalog": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								},
								"date_start": {
									"value": "@pipeline().parameters.date_start",
									"type": "Expression"
								},
								"date_end": {
									"value": "@pipeline().parameters.date_end",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_retail_fact_master",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ep_retail_dim_master",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "retail_fact_master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "job_retail_etl_job",
						"type": "DatabricksJob",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"jobId": "531353983078799",
							"jobParameters": {
								"catalog_name": "project_catalog",
								"dt": "2025-01-01",
								"date_start": "2020-01-01",
								"date_end": "2024-12-31"
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "file-data"
					},
					"dstContainer": {
						"type": "string",
						"defaultValue": "demo"
					},
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					},
					"dt": {
						"type": "string",
						"defaultValue": "2025-01-02"
					},
					"daysOffset": {
						"type": "int",
						"defaultValue": -1000
					},
					"date_start": {
						"type": "string",
						"defaultValue": "2020-01-01"
					},
					"date_end": {
						"type": "string",
						"defaultValue": "2024-01-01"
					}
				},
				"folder": {
					"name": "retail/gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bronze_blob_master')]",
				"[concat(variables('factoryId'), '/pipelines/silver_blob_master')]",
				"[concat(variables('factoryId'), '/pipelines/retail_dim_master')]",
				"[concat(variables('factoryId'), '/pipelines/retail_fact_master')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addSeconds(addHours(activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time, -8), 1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "COPY_Extract Data From File And Load Into STG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "FileLastModifyDate",
													"value": {
														"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "FileName"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "FileLastModifyDate"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": {
													"value": "@variables('srcSheetName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@variables('stgTableNameWithSchema')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = ISNULL(MAX(file_last_modifty_time), '1900-01-01') from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-21T05:38:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src2",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addSeconds(addHours(activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time, -8), 1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "COPY_Extract Data From File And Load Into STG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												{
													"name": "FileLastModifyDate",
													"value": {
														"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "FileName"
													},
													"sink": {
														"name": "file_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "FileLastModifyDate"
													},
													"sink": {
														"name": "file_last_modifty_time",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "ProdunctId",
														"physicalType": "String"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "Qty",
														"physicalType": "String"
													},
													"sink": {
														"name": "qty",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"physicalType": "String"
													},
													"sink": {
														"name": "unit_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												},
												{
													"source": {
														"name": "SubTotal",
														"physicalType": "String"
													},
													"sink": {
														"name": "subtotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 19
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "storage_excel_src2",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": {
													"value": "@variables('srcSheetName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuresql_dst1",
											"type": "DatasetReference",
											"parameters": {
												"tableNameWithSchema": {
													"value": "@variables('stgTableNameWithSchema')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src2",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = ISNULL(MAX(file_last_modifty_time), '1900-01-01') from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst1",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T08:45:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src2')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "通过文件的lastModified过滤实现增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LK_Get File Max Last Modified Datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(addHours(activity('Get File Metadata').output.lastModified, 8), activity('LK_Get File Max Last Modified Datetime').output.firstRow.last_modified_time)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "COPY_Extract Data From File And Load Into STG",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"additionalColumns": [
															{
																"name": "FileName",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															{
																"name": "FileLastModifyDate",
																"value": {
																	"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "file_name",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "FileLastModifyDate",
																	"type": "String"
																},
																"sink": {
																	"name": "file_last_modifty_time",
																	"type": "DateTime",
																	"physicalType": "datetime"
																}
															},
															{
																"source": {
																	"name": "ProdunctId",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "product_id",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "Qty",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "qty",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "UnitPrice",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "unit_price",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															},
															{
																"source": {
																	"name": "SubTotal",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "subtotal",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "storage_excel_src",
														"type": "DatasetReference",
														"parameters": {
															"containerName": {
																"value": "@variables('srcContainerName')",
																"type": "Expression"
															},
															"directoryName": {
																"value": "@variables('srcDirecotryName')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"sheetName": {
																"value": "@variables('srcSheetName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "azuresql_dst",
														"type": "DatasetReference",
														"parameters": {
															"tableNameWithSchema": {
																"value": "@variables('stgTableNameWithSchema')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "LK_Get File Max Last Modified Datetime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select last_modified_time = MAX(file_last_modifty_time) from dbo.ods_sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azuresql_dst",
								"type": "DatasetReference",
								"parameters": {
									"tableNameWithSchema": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T02:38:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "包含完整的文件备份，不增量",
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SP_Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "storage_excel_src",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@variables('srcContainerName')",
										"type": "Expression"
									},
									"directoryName": {
										"value": "@variables('srcDirecotryName')",
										"type": "Expression"
									},
									"fileName": " ",
									"sheetName": " "
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Valid Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Valid Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_excel_src",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sheetName": " "
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Backup file by copy file",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Extract Source Data To STG",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@concat(\n    variables('srcDirecotryName'),\n    if(equals(variables('isSuccess'), 1), '/success', '/failed')\n)",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat(\n    substring(item().name, 0, indexOf(item().name, variables('srcFileExtendName'))), \n    '_',\n    formatDateTime(addHours(utcNow(), 8), 'yyyyMMddHHmmss'),variables('srcFileExtendName')\n)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file by copy file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "storage_binary",
											"type": "DatasetReference",
											"parameters": {
												"contrainerName": {
													"value": "@variables('srcContainerName')",
													"type": "Expression"
												},
												"directoryName": {
													"value": "@variables('srcDirecotryName')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Extract Source Data To STG",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(1,1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "COPY_Extract Data From File And Load Into STG",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Init isSuccess Success",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"additionalColumns": [
															{
																"name": "FileName",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															{
																"name": "FileLastModifyDate",
																"value": {
																	"value": "@addHours(activity('Get File Metadata').output.lastModified, 8)",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "FileName",
																	"type": "String"
																},
																"sink": {
																	"name": "file_name",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "FileLastModifyDate",
																	"type": "String"
																},
																"sink": {
																	"name": "file_last_modifty_time",
																	"type": "DateTime",
																	"physicalType": "datetime"
																}
															},
															{
																"source": {
																	"name": "ProdunctId",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "product_id",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "Qty",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "qty",
																	"type": "Int32",
																	"physicalType": "int"
																}
															},
															{
																"source": {
																	"name": "UnitPrice",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "unit_price",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															},
															{
																"source": {
																	"name": "SubTotal",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "subtotal",
																	"type": "Decimal",
																	"physicalType": "decimal",
																	"scale": 4,
																	"precision": 19
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "storage_excel_src",
														"type": "DatasetReference",
														"parameters": {
															"containerName": {
																"value": "@variables('srcContainerName')",
																"type": "Expression"
															},
															"directoryName": {
																"value": "@variables('srcDirecotryName')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"sheetName": {
																"value": "@variables('srcSheetName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "azuresql_dst",
														"type": "DatasetReference",
														"parameters": {
															"tableNameWithSchema": {
																"value": "@variables('stgTableNameWithSchema')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set isSuccess Failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "COPY_Extract Data From File And Load Into STG",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isSuccess",
													"value": 0
												}
											},
											{
												"name": "Init isSuccess Success",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isSuccess",
													"value": 1
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter Valid Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, variables('srcFileExtendName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('truncateProcWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"tableNameWithSchema": {
									"value": {
										"value": "@variables('stgTableNameWithSchema')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					},
					{
						"name": "SP_Move STG To ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('odsProcNameWithSchema')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.batch_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldb_dw",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "sqldevswcd",
								"dbUserName": "sqladminuser01",
								"dbUserPwd": "1qaz!QAZ",
								"dbServerName": "sqlserverdevswcd.database.windows.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batch_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"srcContainerName": {
						"type": "String",
						"defaultValue": "file-data"
					},
					"srcDirecotryName": {
						"type": "String",
						"defaultValue": "demo/sales"
					},
					"srcSheetName": {
						"type": "String",
						"defaultValue": "sheet1"
					},
					"stgTableNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.stg_sales"
					},
					"odsProcNameWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_etl_ods_sales"
					},
					"srcFileExtendName": {
						"type": "String",
						"defaultValue": ".xlsx"
					},
					"truncateProcWithSchema": {
						"type": "String",
						"defaultValue": "dbo.p_truncate_table"
					},
					"isSuccess": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T02:37:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/storage_excel_src')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/datasets/storage_binary')]",
				"[concat(variables('factoryId'), '/datasets/azuresql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_blob_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "nbk_silver_blob_retail_transaction",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/retail/dml/silver/blob_retail_transaction",
							"baseParameters": {
								"catalog_name": {
									"value": "@pipeline().parameters.dstCatalog",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dstCatalog": {
						"type": "string",
						"defaultValue": "project_catalog"
					}
				},
				"folder": {
					"name": "retail/silver/blob"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-02T10:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DataSourceTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "External control table to store high water mark value.",
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobDateset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_Demo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_Demo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADB数据源"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_Demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_File",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"hasRowHeader": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "retail"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@dataset().hasRowHeader",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Blob_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_File",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"sheet": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADB数据源"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Blob_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"hasRowHeader": {
						"type": "bool"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@dataset().hasRowHeader",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProdunctId",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Deltalake_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Deltalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "retail"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Deltalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HTTP_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP_QYWeChat_Login",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"corpid": {
						"type": "string"
					},
					"corpsecret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "QYWeChat"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "cgi-bin/gettoken",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP_QYWeChat_Login')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": "adfdemo"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_REST_QYWeChat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_REST_QYWeChat",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"RelativeURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "QYWeChat"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_REST_QYWeChat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@{dataset().Data_Destination_Directory}",
							"type": "Expression"
						},
						"container": {
							"value": "@{dataset().Data_Destination_Container}",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_re3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_a_sql_src",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_a_sql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_ukk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AzureBlobStorageFile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "http_onedriver",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ContryPopulation",
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "personal/zhyding_sharewinfobi_onmicrosoft_com/Documents/%E4%BA%BA%E5%8F%A3.xlsx"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/http_onedriver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_leo_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_leo_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_leo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_leo_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					},
					"cw_schema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_leo_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_leo_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_leo_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MainControlTable_m06"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					},
					"cw_schema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_m06_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_m06_20240104"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "opentdb_api",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().baseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"relativeURL": {
						"type": "string",
						"defaultValue": "api.php?amount=10&category=23&difficulty=easy&type=multiple"
					},
					"baseURL": {
						"type": "string",
						"defaultValue": "https://opentdb.com"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/opentdb_api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_re3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "demo/ssiswork/订单数据",
						"container": "file-data"
					},
					"firstRowAsHeader": false
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_ukk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "adfdemo"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "订单ID",
						"type": "String"
					},
					{
						"name": "订单日期",
						"type": "String"
					},
					{
						"name": "发货日期",
						"type": "String"
					},
					{
						"name": "邮寄方式",
						"type": "String"
					},
					{
						"name": "客户ID",
						"type": "String"
					},
					{
						"name": "城市",
						"type": "String"
					},
					{
						"name": "产品ID",
						"type": "String"
					},
					{
						"name": "销售额",
						"type": "String"
					},
					{
						"name": "数量",
						"type": "String"
					},
					{
						"name": "折扣",
						"type": "String"
					},
					{
						"name": "利润",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EmployeeDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_city')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "City"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_src_adfdemo_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_src",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_src_adfdemo_object1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_src",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_src_adfdemo_object2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_src",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_stg_adfdemo_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_stg_adfdemo_object1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dataset_stg_adfdemo_object2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_adfdemo_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_dst",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"table": {
						"type": "string",
						"defaultValue": "stg_sales"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "insert_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "file_last_modifty_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "subtotal",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_ds_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_asql_src",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_blob_dataset_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee Demo.xlsx",
						"container": "adfdemo"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "FirsrtName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_mssql_dataset_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_mssql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_mssql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_rest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_rest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_rest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_rest_opentdb_com')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_rest_opentdb_com",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_rest_opentdb_com')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_storage_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"sheet": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_storage_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfdemo_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "adfdemo"
					},
					"directory": {
						"type": "string",
						"defaultValue": "sales"
					},
					"file": {
						"type": "string",
						"defaultValue": "Sales_2020.xlsx"
					},
					"sheet": {
						"type": "string",
						"defaultValue": "Sheet1"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_storage_ds_plat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FilePath",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_stroage_dataset_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"folder": {
					"name": "adfdemo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee Demo.xlsx",
						"folderPath": "adfdemo",
						"container": "file-data"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "insert_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "file_last_modifty_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "subtotal",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_dataset_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "insert_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "file_last_modifty_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "subtotal",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_employeedemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EmployeeDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_src_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_stg_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "principal_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schema_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parent_object_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "char"
					},
					{
						"name": "type_desc",
						"type": "nvarchar"
					},
					{
						"name": "create_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "modify_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "is_ms_shipped",
						"type": "bit"
					},
					{
						"name": "is_published",
						"type": "bit"
					},
					{
						"name": "is_schema_published",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azuresql_dst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"parameters": {
					"tableNameWithSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "insert_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "file_last_modifty_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "subtotal",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@first(array(split(dataset().tableNameWithSchema, '.')))",
						"type": "Expression"
					},
					"table": {
						"value": "@last(array(split(dataset().tableNameWithSchema, '.')))",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azuresql_dst1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldb_dw",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": "sqldevswcd",
						"dbUserName": "sqladminuser01",
						"dbUserPwd": "1qaz!QAZ",
						"dbServerName": "sqlserverdevswcd.database.windows.net"
					}
				},
				"parameters": {
					"tableNameWithSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "insert_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "file_name",
						"type": "nvarchar"
					},
					{
						"name": "file_last_modifty_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "subtotal",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@first(array(split(dataset().tableNameWithSchema, '.')))",
						"type": "Expression"
					},
					"table": {
						"value": "@last(array(split(dataset().tableNameWithSchema, '.')))",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobstorage_ds_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"sheet": {
						"type": "string"
					},
					"range": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"range": {
						"value": "@dataset().range",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cummins_restapi_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rest_qiweb_uselist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_qyweb_userlist",
					"type": "LinkedServiceReference",
					"parameters": {
						"access_token": {
							"value": "@dataset().access_token",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"access_token": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_qyweb_userlist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filesystem_ds_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fs_offline",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"sheet": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet",
						"type": "Expression"
					},
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fs_offline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/msql_demo_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mssql_demo",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "b"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "TestDataSource"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mssql_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mssql_adfemo_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mssql_adfdemo",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mssql_adfdemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pbi_xuqiu_ds_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "http_aishu_site",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/#/preview/customdoc/信息化体系库/信息化项目/BI项目/BI项目实施/BI项目组成员通讯录@20231016.xlsx"
					},
					"sheetIndex": 1,
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/http_aishu_site')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"contrainerName": {
						"type": "string"
					},
					"directoryName": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().contrainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_excel_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"directoryName": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"sheetName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ProdunctId",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_excel_src1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"directoryName": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"sheetName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ProdunctId",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_excel_src2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"containerName": {
						"type": "string"
					},
					"directoryName": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"sheetName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ProdunctId",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_plat_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"delimeter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": " "
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storge_excel_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_account",
					"type": "LinkedServiceReference",
					"parameters": {
						"storageAccountName": "storageswcd"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee Demo.xlsx",
						"folderPath": "adfdemo",
						"container": "file-data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "FirsrtName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"keyVaultAccountURL": {
						"type": "string",
						"defaultValue": "https://asql-kva-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1415684505735454.14.azuredatabricks.net/",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LS_ADB_accessToken')]"
					},
					"existingClusterId": "[parameters('LS_ADB_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADB_Job')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1415684505735454.14.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LS_ADB_Job_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1:4",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "17.0.x-photon-scala2.13",
					"clusterOption": "Autoscaling",
					"newClusterInitScripts": [],
					"dataSecurityMode": "USER_ISOLATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_Demo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_ASQL_Demo_properties_typeProperties_server')]",
					"database": "[parameters('LS_ASQL_Demo_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_ASQL_Demo_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_ASQL_Demo_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Blob_File')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Blob_File_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Deltalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Deltalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Deltalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTP_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWX')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "企业微信的 REST 类型的链接服务",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWX_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWeChat')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWeChat_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('LS_REST_QYWeChat_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_REST_QYWeChat_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"corpid": {
						"type": "string"
					},
					"corpsecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_WEB_QYWeChat_Login')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WebConnection",
				"parameters": {
					"corpid": {
						"type": "string"
					},
					"corpsecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"typeProperties": {
					"url": "[parameters('LS_WEB_QYWeChat_Login_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Secret": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_a_sql_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_a_sql_src_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_dst')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_asql_dst_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_asql_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_asql_src_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_mssql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_mssql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_rest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('adfdemo_rest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_rest_opentdb_com')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('adfdemo_rest_opentdb_com_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdemo_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('adfdemo_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fs_offline')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('fs_offline_properties_typeProperties_host')]",
					"userId": "[parameters('fs_offline_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('fs_offline_password')]"
					}
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/http_aishu_site')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('http_aishu_site_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('http_aishu_site_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('http_aishu_site_password')]"
					}
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/http_onedriver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('http_onedriver_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('http_onedriver_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('http_onedriver_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mssql_adfdemo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('mssql_adfdemo_connectionString')]"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mssql_demo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "TestDataSource"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('mssql_demo_connectionString')]"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/opentdb_api')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"baseURL": {
						"type": "string",
						"defaultValue": "https://opentdb.com/api.php"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('opentdb_api_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_qyweb_userlist')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"access_token": {
						"type": "String",
						"defaultValue": " "
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('rest_qyweb_userlist_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('rest_qyweb_userlist_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('rest_qyweb_userlist_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldb_dw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "sqldevswcd"
					},
					"dbUserName": {
						"type": "string",
						"defaultValue": "sqladminuser01"
					},
					"dbUserPwd": {
						"type": "string",
						"defaultValue": "1qaz!QAZ"
					},
					"dbServerName": {
						"type": "string",
						"defaultValue": "sqlserverdevswcd.database.windows.net"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqldb_dw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AzureIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_account')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"storageAccountName": {
						"type": "string",
						"defaultValue": "storageswcd"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('storage_account_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_ukk')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_ukk",
							"type": "PipelineReference"
						},
						"parameters": {
							"windowStart": {
								"type": "Expression",
								"value": "[parameters('Trigger_ukk_properties_CopyPipeline_ukk_parameters_windowStart')]"
							}
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2025-07-28T07:33:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_ukk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_sch_retail')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "retail_master",
							"type": "PipelineReference"
						},
						"parameters": {
							"container": "[parameters('trg_sch_retail_properties_retail_master_parameters_container')]",
							"dstContainer": "[parameters('trg_sch_retail_properties_retail_master_parameters_dstContainer')]",
							"dstCatalog": "[parameters('trg_sch_retail_properties_retail_master_parameters_dstCatalog')]",
							"dt": "[parameters('trg_sch_retail_properties_retail_master_parameters_dt')]",
							"daysOffset": "[parameters('trg_sch_retail_properties_retail_master_parameters_daysOffset')]",
							"date_start": "[parameters('trg_sch_retail_properties_retail_master_parameters_date_start')]",
							"date_end": "[parameters('trg_sch_retail_properties_retail_master_parameters_date_end')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-09-02T02:58:00",
						"timeZone": "China Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/retail_master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TutorialIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     srcTableNameWithSchema as string ('dbo.src_object'),",
						"     dstTableNameWithSchema as string ('dbo.stg_object')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($srcTableNameWithSchema, '.')[1]),",
						"     tableName: (split($srcTableNameWithSchema, '.')[2]),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 derive(flle_name = 123) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($dstTableNameWithSchema, '.')[1]),",
						"     tableName: (split($dstTableNameWithSchema, '.')[2]),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     srcTableSQL as string ('select name, object_id,principal_id,schema_id,parent_object_id,type,type_desc,create_date,modify_date,is_ms_shipped,is_published,is_schema_published from dbo.src_object where modify_date>\\'1900-01-01\\''),",
						"     dstTableNameWithSchema as string ('dbo.stg_object')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: ($srcTableSQL),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 derive(file_name = 123) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: (split($dstTableNameWithSchema, '.')[1]),",
						"     tableName: (split($dstTableNameWithSchema, '.')[2]),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "storage_account",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "compose1",
							"flowlet": {
								"referenceName": "flowlet2",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true,",
						"     format: 'excel',",
						"     container: 'file-data',",
						"     folderPath: 'demo/ssiswork/地点数据',",
						"     sheetName: 'Sheet1',",
						"     firstRowAsHeader: true) ~> source1",
						"compose(composition: 'flowlet2') ~> compose1@(output1)",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'city',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_account')]",
				"[concat(variables('factoryId'), '/dataflows/flowlet2')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 aggregate(cnt = count(object_id),",
						"          each(patternMatch(`(name)` , type=='string'), $$ = count(object_id)),",
						"          each(match(in(['type','type_desc'],name)), $$ = first($$))) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "splitByTypeDesc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 split(type_desc == 'USER_TABLE' || type_desc == 'VIEW',",
						"     type_desc == 'SQL_STORED_PROCEDURE' ||  type_desc == 'SQL_SCALAR_FUNCTION' || type_desc == 'SQL_TABLE_VALUED_FUNCTION' || type == 'SQL_INLINE_TABLE_VALUED_FUNCTION',",
						"     disjoint: false) ~> splitByTypeDesc@(typeIsTableView, typeIsProgramingObject, typeOther)",
						"splitByTypeDesc@typeIsTableView sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_derivedcolumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"derivedColumn1 filter(type =='P') ~> filter1",
						"source1 derive(column1 = 'a column value',",
						"          each(match(type=='integer'), $$ = $$ + 2),",
						"          each(match(type=='string'), $$ = $$ + 'kk'),",
						"          column2 = 'ldsfds',",
						"          each(match(type=='string'), $$+'short' = $$+'123')) ~> derivedColumn1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source1, source2 exists(source1@name == source2@name,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 filter(type_desc == 'SQL_STORED_PROCEDURE' || type_desc == 'USER_TABLE') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source1, source2 join(fuzzyCompare(source1@name, source2@name, 80.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: true,",
						"     scoreColumn:'60',",
						"     broadcast: 'off')~> join1",
						"join1 select(mapColumn(",
						"          each(match(instr(name,'source1@')==0))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          object_id,",
						"          principal_id,",
						"          schema_id,",
						"          parent_object_id,",
						"          type,",
						"          type_desc,",
						"          create_date,",
						"          modify_date,",
						"          is_ms_shipped,",
						"          is_published,",
						"          is_schema_published",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_key as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select name, object_id object_key from sys.objects where is_ms_shipped = 0',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"lookup1 select(mapColumn(",
						"          each(match(instr(name,'source1@')==0))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, source2 lookup(source1@name == source2@name,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          object_id,",
						"          principal_id,",
						"          schema_id,",
						"          parent_object_id,",
						"          type,",
						"          type_desc,",
						"          create_date,",
						"          modify_date,",
						"          is_ms_shipped,",
						"          is_published,",
						"          is_schema_published",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          class as string,",
						"          score as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select *\\nfrom (values\\n     (N\\'张三\\', N\\'语文\\', 80),\\n     (N\\'张三\\', N\\'数学\\', 89),\\n     (N\\'张三\\', N\\'英语\\', 88),\\n     (N\\'李四\\', N\\'语文\\', 89),\\n     (N\\'李四\\', N\\'数学\\', 90),\\n     (N\\'李四\\', N\\'英语\\', 91)\\n) t1 ([name], class, score)',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(groupBy(name),",
						"     pivotBy(class, ['语文', '数学', '英语', null]),",
						"     sum = sum(score),",
						"     columnNaming: 'a$Nb$Vc',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from (values(N\\'type1\\', 2), (N\\'type2\\', 3)) as t1([type], cnt)',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['type1', 'type2', 'D', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_pivot3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          cnt as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select type, count(1) as cnt from dbo.src_object group by type',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 pivot(pivotBy(type, ['D', 'FN', 'P', 'U', null]),",
						"     {} = sum(cnt),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_src",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          body as (response_code as boolean, results as (category as string, correct_answer as string, difficulty as string, incorrect_answers as string[], question as string, type as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source2",
						"source1 select(mapColumn(",
						"          each(match(type=='string'&&length(name)<12)),",
						"          each(match(locate('id',name)>0)),",
						"          each(patternMatch(`(r)`))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          each(body.results,match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'adfdemo_rest_two',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          category,",
						"          correct_answer,",
						"          difficulty,",
						"          incorrect_answers,",
						"          question,",
						"          type",
						"     )) ~> sink2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_rest_opentdb_com')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "adfdemo_rest_opentdb_com",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_src",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          body as (response_code as boolean, results as (category as string, correct_answer as string, difficulty as string, incorrect_answers as string[], question as string, type as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source2",
						"source1 select(mapColumn(",
						"          each(match(type=='string'&&length(name)<12)),",
						"          each(match(locate('id',name)>0)),",
						"          each(patternMatch(`(r)`))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          each(body.results,match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'adfdemo_rest_two',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          category,",
						"          correct_answer,",
						"          difficulty,",
						"          incorrect_answers,",
						"          question,",
						"          type",
						"     )) ~> sink2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_rest_opentdb_com')]",
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 sort(asc(name, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'src_object',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from sys.system_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source(output(",
						"          name as string,",
						"          object_id as integer,",
						"          principal_id as integer,",
						"          schema_id as integer,",
						"          parent_object_id as integer,",
						"          type as string,",
						"          type_desc as string,",
						"          create_date as timestamp,",
						"          modify_date as timestamp,",
						"          is_ms_shipped as boolean,",
						"          is_published as boolean,",
						"          is_schema_published as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'sys',",
						"     tableName: 'all_objects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source3",
						"source1, source2, source3 union(byName: false)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'stg_object',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldb_dw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     stgTableNameWithSchem as string ('dbo.adfdemo')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'objects',",
						"     isolationLevel: 'READ_COMMITTED') ~> source1",
						"source1 output() ~> output1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldb_dw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "adfdemo_asql_dst",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          insert_dt as string,",
						"          file_name as string,",
						"          file_last_modifty_time as timestamp,",
						"          product_id as integer,",
						"          qty as integer,",
						"          unit_price as decimal(19,4),",
						"          subtotal as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select convert(nvarchar(23), insert_dt, 121) insert_dt, file_name, file_last_modifty_time, product_id, qty, unit_price, subtotal from dbo.stg_sales',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 filter(qty <= 10) ~> filter1",
						"filter1 output() ~> output1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfdemo_asql_dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq_employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"folder": {
					"name": "demo"
				},
				"typeProperties": {
					"sources": [
						{
							"name": "adfdemo_asql_dataset_employee",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_dataset_employee",
							"dataset": {
								"referenceName": "adfdemo_asql_dataset_employee",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared adfdemo_asql_dataset_employee = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"employee\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"adfdemo_asql_dataset_employee\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/qp_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"folder": {
					"name": "demo"
				},
				"typeProperties": {
					"sources": [
						{
							"name": "adfdemo_asql_dataset",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_dataset",
							"dataset": {
								"referenceName": "adfdemo_asql_dataset",
								"type": "DatasetReference"
							}
						},
						{
							"name": "adfdemo_asql_ds",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> adfdemo_asql_ds",
							"dataset": {
								"referenceName": "adfdemo_asql_ds",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared adfdemo_asql_dataset = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"EmployeeDemo\"]}[Data] in InputTable;\r\nshared adfdemo_asql_ds = let AdfDoc = Sql.Database(\"sqlserverdevswcd.database.windows.net\", \"sqldevswcd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"stg_sales\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"adfdemo_asql_dataset\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_dataset')]",
				"[concat(variables('factoryId'), '/datasets/adfdemo_asql_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_MDM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_Demo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "retail"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_Demo')]"
			]
		}
	]
}