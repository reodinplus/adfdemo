{
	"name": "dataflow_conditionalsplit",
	"properties": {
		"folder": {
			"name": "demo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "sqldb_dw",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "sqldb_dw",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "splitByTypeDesc"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          object_id as integer,",
				"          principal_id as integer,",
				"          schema_id as integer,",
				"          parent_object_id as integer,",
				"          type as string,",
				"          type_desc as string,",
				"          create_date as timestamp,",
				"          modify_date as timestamp,",
				"          is_ms_shipped as boolean,",
				"          is_published as boolean,",
				"          is_schema_published as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'src_object',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
				"source1 split(type_desc == 'USER_TABLE' || type_desc == 'VIEW',",
				"     type_desc == 'SQL_STORED_PROCEDURE' ||  type_desc == 'SQL_SCALAR_FUNCTION' || type_desc == 'SQL_TABLE_VALUED_FUNCTION' || type == 'SQL_INLINE_TABLE_VALUED_FUNCTION',",
				"     disjoint: false) ~> splitByTypeDesc@(typeIsTableView, typeIsProgramingObject, typeOther)",
				"splitByTypeDesc@typeIsTableView sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'stg_object',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}